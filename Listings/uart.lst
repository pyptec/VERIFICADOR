C51 COMPILER V9.59.0.0   UART                                                              10/09/2020 16:27:20 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Objects\uart.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE uart.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listing
                    -s\uart.lst) TABS(2) OBJECT(.\Objects\uart.obj)

line level    source

   1          /*------------------------------------------------------------------------------
   2          SIO.C:  Serial Communication Routines.
   3          
   4          Copyright 1995-2002 KEIL Software, Inc.
   5          ------------------------------------------------------------------------------*/
   6          
   7          #include <reg51.h>
   8          #include "uart.h"
   9          
  10          
  11          /*variables globales */
  12          extern idata unsigned char tbuf [];
  13          extern idata unsigned char rbuf [];
  14          extern unsigned char g_cEstadoComSoft;
  15          extern unsigned char xdata Buffer_Rta_Lintech[];
  16          extern  unsigned char g_cContByteRx;
  17          extern unsigned char ValTimeOutCom;
  18          extern unsigned char cont_trama;
  19          /*constantes globales*/
  20          extern const unsigned  char ACK;
  21          extern const unsigned  char ETX;
  22          extern const unsigned  char STX_LINTECH;
  23          unsigned char error_rx=0;
  24          
  25          /*externos bits*/
  26          extern bit buffer_ready;
  27          /*------------------------------------------------------------------------------
  28          Notes:
  29          
  30          The length of the receive and transmit buffers must be a power of 2.
  31          
  32          Each buffer has a next_in and a next_out index.
  33          
  34          If next_in = next_out, the buffer is empty.
  35          
  36          (next_in - next_out) % buffer_size = the number of characters in the buffer.
  37          ------------------------------------------------------------------------------*/
  38          #define TBUF_SIZE   2           /*** Must be one of these powers of 2 (2,4,8,16,32,64,128) ***/
  39          #define RBUF_SIZE   8          /*** Must be one of these powers of 2 (2,4,8,16,32,64,128) ***/
  40          /*definiciones de los estados de recepcion*/
  41          #define  ESPERA_RX          0           //espera el primer cmd de recepcion del verificado 
  42          #define  ESPERA_INICIO_RTA  1   // se almacena el stx
  43          #define  LEN_DATA           2
  44          #define  STORE_DATA         3
  45          
  46          
  47          
  48          /*tiempo de delay entre funciones*/
  49          #define TIME_CARD       5     //50
  50          #define TIME_EJECT        5     //60
  51          #define RET_MINIMO        3
  52          
  53          #define TBUF_SIZE_LINTECH   50  
  54          //#define XTAL   22118400
C51 COMPILER V9.59.0.0   UART                                                              10/09/2020 16:27:20 PAGE 2   

  55          //#define TBUF_SPACE  idata       /*** Memory space where the transmit buffer resides ***/
  56          //#define RBUF_SPACE  idata       /*** Memory space where the receive buffer resides ***/
  57          
  58          #define CTRL_SPACE  data        /*** Memory space for the buffer indexes ***/
  59          
  60          /*------------------------------------------------------------------------------
  61          ------------------------------------------------------------------------------*/
  62          /*
  63          #if TBUF_SIZE < 2
  64          #error TBUF_SIZE is too small.  It must be larger than 1.
  65          #elif TBUF_SIZE > 128
  66          #error TBUF_SIZE is too large.  It must be smaller than 129.
  67          #elif ((TBUF_SIZE & (TBUF_SIZE-1)) != 0)
  68          #error TBUF_SIZE must be a power of 2.
  69          #endif
  70          
  71          #if RBUF_SIZE < 2
  72          #error RBUF_SIZE is too small.  It must be larger than 1.
  73          #elif RBUF_SIZE > 128
  74          #error RBUF_SIZE is too large.  It must be smaller than 129.
  75          #elif ((RBUF_SIZE & (RBUF_SIZE-1)) != 0)
  76          #error RBUF_SIZE must be a power of 2.
  77          #endif
  78          */
  79          /*------------------------------------------------------------------------------
  80          ------------------------------------------------------------------------------*/
  81          //static idata unsigned char tbuf [TBUF_SIZE];
  82          //static idata unsigned char rbuf [RBUF_SIZE];
  83          
  84          static CTRL_SPACE unsigned char t_in = 0;
  85          static CTRL_SPACE unsigned char t_out = 0;
  86          
  87          static CTRL_SPACE unsigned char r_in = 0;
  88          static CTRL_SPACE unsigned char r_out = 0;
  89          
  90          static bit ti_restart = 0;  /* NZ if TI=1 is required */
  91          bit aSk=0;                  /*indica que llego el 06 = ask de que recivio el msj*/
  92          
  93          /*------------------------------------------------------------------------------
  94          ------------------------------------------------------------------------------*/
  95          static void com_isr (void) interrupt 4 
  96          {
  97   1      static xdata unsigned char cDatoRx;
  98   1      xdata unsigned char k,bcc;
  99   1      static xdata unsigned char num_datos;
 100   1      /*------------------------------------------------
 101   1      Received data interrupt.
 102   1        cada trama enviada al transporte tiene una aceptacion de un ask que si fue recivida.
 103   1        tengo dos buffer
 104   1        rbuf= guarda toda la informacion como llega
 105   1        Buffer_Rta_Lintech= que guarda la respuesta del transporte
 106   1        g_cContByteRx= contador de datos recibidos
 107   1      ------------------------------------------------*/
 108   1      if (RI != 0)
 109   1        {
 110   2          
 111   2        RI = 0;
 112   2        cDatoRx=SBUF;
 113   2        if (((r_in - r_out) & ~(RBUF_SIZE-1)) == 0)
 114   2          {
 115   3          rbuf [r_in & (RBUF_SIZE-1)] = cDatoRx;    //cDatoRx;
 116   3          r_in++;
C51 COMPILER V9.59.0.0   UART                                                              10/09/2020 16:27:20 PAGE 3   

 117   3            
 118   3          }
 119   2          if(g_cContByteRx>TBUF_SIZE_LINTECH)
 120   2            {
 121   3                  g_cEstadoComSoft=ESPERA_RX;
 122   3            }
 123   2          switch (g_cEstadoComSoft)
 124   2          {
 125   3      /*------------------------------------------------------------------------------------------------
 126   3            espera el ASK de respuesta
 127   3      -------------------------------------------------------------------------------------------------*/     
 128   3            case ESPERA_RX:
 129   3            
 130   3            
 131   3            if(cDatoRx==ACK)                // espera el ask
 132   3            {
 133   4              aSk=1;
 134   4            g_cContByteRx=0;r_in=0;r_out=0; 
 135   4            g_cEstadoComSoft=ESPERA_INICIO_RTA;
 136   4            
 137   4            }
 138   3          break;
 139   3      /*------------------------------------------------------------------------------------------------
 140   3            se almacena la trama 
 141   3      -------------------------------------------------------------------------------------------------*/
 142   3            case ESPERA_INICIO_RTA:
 143   3            { 
 144   4              Buffer_Rta_Lintech[g_cContByteRx++]=cDatoRx;
 145   4              if(Buffer_Rta_Lintech[0]==STX_LINTECH)
 146   4              {           
 147   5                g_cEstadoComSoft=LEN_DATA;
 148   5              }
 149   4              else
 150   4              {
 151   5                g_cEstadoComSoft=ESPERA_RX;
 152   5              }
 153   4            }
 154   3            break;
 155   3      /*------------------------------------------------------------------------------------------------
 156   3            se toma la longitud de la trama a recibir y se le suman 2 caracteres ETX y BCC
 157   3      -------------------------------------------------------------------------------------------------*/
 158   3          case LEN_DATA:
 159   3            
 160   3          if (g_cContByteRx==3)
 161   3          {
 162   4            
 163   4            num_datos=cDatoRx+2;
 164   4            Buffer_Rta_Lintech[g_cContByteRx++]=cDatoRx;
 165   4            g_cEstadoComSoft=STORE_DATA;      //numero de datos a recibir
 166   4          } 
 167   3          else
 168   3          {     
 169   4            Buffer_Rta_Lintech[g_cContByteRx++]=cDatoRx;
 170   4            g_cEstadoComSoft=LEN_DATA;
 171   4          }
 172   3      
 173   3          break;
 174   3      /*------------------------------------------------------------------------------------------------
 175   3          se almacena los datos 
 176   3      /*-------------------------------------------------------------------------------------------------*/
 177   3          case STORE_DATA:
 178   3            
C51 COMPILER V9.59.0.0   UART                                                              10/09/2020 16:27:20 PAGE 4   

 179   3              Buffer_Rta_Lintech[g_cContByteRx++]=cDatoRx;  
 180   3              num_datos--;
 181   3              if (num_datos==0)
 182   3              {
 183   4                
 184   4                if(Buffer_Rta_Lintech[g_cContByteRx-2]==ETX)
 185   4                {
 186   5                  bcc=0;
 187   5                  for (k=0; k<g_cContByteRx-1; k++)
 188   5                  {
 189   6                    bcc=Buffer_Rta_Lintech[k]^bcc;
 190   6                  }
 191   5                    if (bcc==Buffer_Rta_Lintech[g_cContByteRx-1]) 
 192   5                    {
 193   6                      aSk=0;
 194   6                      error_rx=0;
 195   6                      buffer_ready=1;
 196   6                      g_cEstadoComSoft=ESPERA_RX;                     /* bcc ok trama valida*/
 197   6                                
 198   6                    }
 199   5                    else
 200   5                    {
 201   6                      g_cEstadoComSoft=ESPERA_RX;                     /* bcc no concuerda  trama no valida*/
 202   6                    }
 203   5                } 
 204   4                else 
 205   4                {
 206   5                  g_cEstadoComSoft=ESPERA_RX;                         /*  no concuerda  ETX en la trama no valida*/
 207   5                } 
 208   4                      
 209   4              }
 210   3              else 
 211   3              {
 212   4                g_cEstadoComSoft=STORE_DATA;                          /* espera datos*/
 213   4              }
 214   3             
 215   3          break;    
 216   3      
 217   3      /*------------------------------------------------------------------------------------------------
 218   3          
 219   3      /*-------------------------------------------------------------------------------------------------*/       
 220   3          default:
 221   3            g_cEstadoComSoft=ESPERA_RX;
 222   3          break;
 223   3          }
 224   2        }
 225   1      
 226   1      /*------------------------------------------------
 227   1      Transmitted data interrupt.
 228   1      ------------------------------------------------*/
 229   1      if (TI != 0)
 230   1        {
 231   2        TI = 0;
 232   2      
 233   2        if (t_in != t_out)
 234   2          {
 235   3          SBUF = tbuf [t_out & (TBUF_SIZE-1)];
 236   3          t_out++;
 237   3          ti_restart = 0;
 238   3          }
 239   2        else
 240   2          {
C51 COMPILER V9.59.0.0   UART                                                              10/09/2020 16:27:20 PAGE 5   

 241   3          ti_restart = 1;
 242   3          }
 243   2        }
 244   1      
 245   1      }
 246          /*
 247          void tx_chr (unsigned char data_com)
 248           {
 249          
 250            SBUF=data_com;
 251            sendactive=1;
 252            while (sendactive==1) 
 253            {
 254            }
 255           }
 256          */
 257          /*------------------------------------------------------------------------------
 258          ------------------------------------------------------------------------------*/
 259          #pragma disable
 260          
 261          void com_initialize (void)
 262          {
 263   1      /*------------------------------------------------
 264   1      Setup TIMER1 to generate the proper baud rate.
 265   1      ------------------------------------------------*/
 266   1      com_baudrate ();
 267   1      
 268   1      /*------------------------------------------------
 269   1      Clear com buffer indexes.
 270   1      ------------------------------------------------*/
 271   1      t_in = 0;
 272   1      t_out = 0;
 273   1      
 274   1      r_in = 0;
 275   1      r_out = 0;
 276   1      
 277   1      /*------------------------------------------------
 278   1      Setup serial port registers.
 279   1      ------------------------------------------------*/
 280   1      SM0 = 0; SM1 = 1;   /* serial port MODE 1 */
 281   1      SM2 = 0;
 282   1      REN = 1;            /* enable serial receiver */
 283   1      
 284   1      RI = 0;             /* clear receiver interrupt */
 285   1      TI = 0;             /* clear transmit interrupt */
 286   1      ti_restart = 1;
 287   1      
 288   1      ES = 1;             /* enable serial interrupts */
 289   1      PS = 1;             /* set serial interrupts to low priority */
 290   1      }
 291          
 292          /*------------------------------------------------------------------------------
 293          ------------------------------------------------------------------------------*/
 294          #pragma disable
 295          
 296          void com_baudrate ()
 297            
 298          {
 299   1      /*------------------------------------------------
 300   1      Clear transmit interrupt and buffer.
 301   1      ------------------------------------------------*/
 302   1      TI = 0;             /* clear transmit interrupt */
C51 COMPILER V9.59.0.0   UART                                                              10/09/2020 16:27:20 PAGE 6   

 303   1      t_in = 0;           /* empty transmit buffer */
 304   1      t_out = 0;
 305   1      
 306   1      /*------------------------------------------------
 307   1      Set timer 1 up as a baud rate generator.
 308   1      ------------------------------------------------*/
 309   1      TR1 = 0;            /* stop timer 1 */
 310   1      ET1 = 0;            /* disable timer 1 interrupt */
 311   1      
 312   1      PCON |= 0x80;       /* 0x80=SMOD: set serial baudrate doubler */
 313   1      
 314   1      TMOD &= ~0xF0;      /* clear timer 1 mode bits */
 315   1      TMOD |= 0x20;       /* put timer 1 into MODE 2 */
 316   1      
 317   1      TH1 =0xf4;// (unsigned char) (256 - (XTAL / (16L * 12L * baudrate)));
 318   1      TL1=0xf4;
 319   1      TR1 = 1;            /* start timer 1 */
 320   1      }
 321          
 322          /*------------------------------------------------------------------------------
 323          ------------------------------------------------------------------------------*/
 324          #pragma disable
 325          
 326          char com_putchar (
 327            unsigned char c)
 328          {
 329   1      /*------------------------------------------------
 330   1      If the buffer is full, return an error value.
 331   1      ------------------------------------------------*/
 332   1      if (com_tbuflen () >= TBUF_SIZE)
 333   1        return (-1);
 334   1      
 335   1      /*------------------------------------------------
 336   1      Add the data to the transmit buffer.  If the
 337   1      transmit interrupt is disabled, then enable it.
 338   1      ------------------------------------------------*/
 339   1      tbuf [t_in & (TBUF_SIZE - 1)] = c;
 340   1      t_in++;
 341   1      
 342   1      if (ti_restart)
 343   1        {
 344   2        ti_restart = 0;
 345   2        TI = 1;               /* generate transmit interrupt */
 346   2        }
 347   1      
 348   1      return (0);
 349   1      }
 350          
 351          /*------------------------------------------------------------------------------
 352          ------------------------------------------------------------------------------*/
 353          #pragma disable
 354          
 355          int com_getchar (void)
 356          {
 357   1      if (com_rbuflen () == 0)
 358   1        return (-1);
 359   1      
 360   1      return (rbuf [(r_out++) & (RBUF_SIZE - 1)]);
 361   1      }
 362          
 363          /*------------------------------------------------------------------------------
 364          ------------------------------------------------------------------------------*/
C51 COMPILER V9.59.0.0   UART                                                              10/09/2020 16:27:20 PAGE 7   

 365          #pragma disable
 366          
 367          unsigned char com_rbuflen (void)
 368          {
 369   1      return (r_in - r_out);
 370   1      }
 371          
 372          /*------------------------------------------------------------------------------
 373          ------------------------------------------------------------------------------*/
 374          #pragma disable
 375          
 376          unsigned char com_tbuflen (void)
 377          {
 378   1      return (t_in - t_out);
 379   1      }
 380          
 381          /*------------------------------------------------------------------------------
 382          ------------------------------------------------------------------------------*/
 383          /*
 384          void clean_tx()
 385          {
 386            t_in = 0;
 387            t_out = 0;
 388          }
 389          */
 390          /*
 391          void tx_chr (unsigned char data_com)
 392           {
 393          
 394             
 395             tbuf [t_in & (TBUF_SIZE - 1)]=data_com
 396             t_in++;
 397              if (t_in != t_out)
 398              {
 399              SBUF = tbuf [t_out & (TBUF_SIZE-1)];
 400              t_out++;
 401              ti_restart = 0;
 402              }
 403             
 404             
 405             
 406            SBUF=data_com;
 407            ti_restart=1;
 408            while (ti_restart==1) 
 409            {
 410            }
 411           }}*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    650    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      3       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
