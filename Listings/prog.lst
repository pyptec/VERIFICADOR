C51 COMPILER V9.59.0.0   PROG                                                              08/05/2020 11:21:05 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE PROG
OBJECT MODULE PLACED IN .\Objects\prog.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE prog.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listing
                    -s\prog.lst) TABS(2) OBJECT(.\Objects\prog.obj)

line level    source

   1          
   2          #include "prog.h" 
   3          #include <string.h>
   4          extern int printf   (const char *, ...);
   5          extern char putchar (char);
   6          extern char getchar (void);
   7          extern char  *strtok  (char *str, const char *set);
   8          extern char   strcmp  (const char *s1, const char *s2);
   9          extern char  *strcpy  (char *s1, const char *s2);
  10          extern char _getkey (void);
  11          extern char  *strcat  (char *s1, const char *s2);
  12          extern unsigned char rd_eeprom (unsigned char control,unsigned int Dir); 
  13          extern void wr_eeprom (unsigned char control,unsigned int Dir, unsigned char data_eeprom);
  14          extern int sprintf  (char *, const char *, ...);
  15          extern int    atoi (const char *s1);
  16          
  17          unsigned char cursor[20] = "/"; //current working directory
  18          unsigned char validacion [9]={"admin"}; //usuario
  19          
  20          
  21          
  22          
  23          /*define posiciones de memoria*/
  24          #define EE_ID_CLIENTE         0x0000
  25          #define EE_ID_PARK            0x0002
  26          #define EE_TIEMPO_GRACIA      0x0004
  27          #define EE_SIN_COBRO          0x0006
  28          #define EE_DEBUG              0x0008
  29          #define EE_USE_LPR            0x000A
  30          #define EE_CPRCN_ACTIVA       0x000C
  31          #define EE_TIPO_PANTALLA      0X000E
  32          #define EE_DCTO_PASA_CAJA     0X000F
  33          #define EE_CAMBIO_ID          0XF000
  34          
  35          /* Definicion del tamaño de comando y longitud de cmd*/
  36          
  37          #define   NUMCOMMAND 11
  38          #define   LONGSIZE 3
  39          
  40          
  41          
  42          char comandos[NUMCOMMAND][LONGSIZE]=
  43          {
  44            "0",          //ID_CLIENTEValor del punto cero.
  45            "1",       //COD_PARKTiempo de recolecion entre muestra
  46            "2",    // T_GRACIAInformacion recolectada enviada al rs232
  47            "3",    //SIN_COBROAjuste del cero del sensor
  48            "4",  //DEBUG Calibracion por la curva de la pendiente
  49            "5",    //USE_LPR
  50            "6",//COMPARACION_ACTIVA
  51            "7",      //TIPO_PANTALLA
  52            "8",      //DCTO por caja
  53            "9",     //AYUDA Ayuda!muestra todos los comandos
  54            "10"    //SALIRSalir de programacion
C51 COMPILER V9.59.0.0   PROG                                                              08/05/2020 11:21:05 PAGE 2   

  55          };
  56          
  57          /*------------------------------------------------------------------------------
  58          Rutina que encripta la clave q se le envie
  59          len_clave= longitud de la clave a encriptar
  60          aleatorio=numero aleatoria para escoger el dato a sumar y para la or
  61          
  62          ------------------------------------------------------------------------------*/
  63          unsigned char *hash_id(unsigned char *clave)
  64          {
  65   1        unsigned char len_clave,i;
  66   1        static unsigned int temp, temp1;
  67   1        unsigned char aleatorio []={":[<%?XT]=)" };
  68   1        unsigned char suma []={"#*YJAIMEcamiltK"};/*caracteres q se le suman a la trama */
  69   1        unsigned char xxor []={"wrz25q68-91fS.@" };
  70   1        unsigned char usuario1[6];
  71   1        
  72   1        len_clave=strlen(clave);                      /*longitud de la clave a encriptar*/
  73   1        for (i=0; i<len_clave;i++)
  74   1        {
  75   2          temp=*(clave+i)+aleatorio[i];               /*el primer caracter de la clave se le suma con el primero de los a
             -leatorios*/
  76   2          temp1=temp & 15;                            /*al  resultado se le hace una and con (0x0f)*/
  77   2          if (temp1==0)temp1++; 
  78   2          temp=*(clave+i) + suma[temp1-1];            /*se suma la clave  con el arreglo suma y el valor del arreglo bie
             -ne de  aleatorio el resultado q da en temp */
  79   2          temp1=temp & 15;
  80   2          if (temp1==0)temp1++;
  81   2          temp=temp ^ xxor[temp1-1];                  /*temp se le hace uan xor aleatoria*/
  82   2          if (temp > 255)
  83   2          {
  84   3            temp=temp & 255;
  85   3          }     
  86   2          if ((temp >=122)&&(temp<=255))
  87   2          {
  88   3          temp=temp & 122;
  89   3          
  90   3          }
  91   2          if (temp < 48)
  92   2          {
  93   3            temp=temp+64;
  94   3          }
  95   2          if ((temp>=91)&&(temp<=96))
  96   2          {
  97   3            temp=temp +7 ;
  98   3          }
  99   2          if ((temp>=58)&&(temp<=64))
 100   2          {
 101   3            temp=temp - 7 ;
 102   3          }
 103   2          usuario1[i]=temp;
 104   2          
 105   2        }
 106   1        return usuario1;
 107   1      }
 108          
 109          
 110          /*------------------------------------------------------------------------------
 111          Rutina de lista de comandos 
 112          ------------------------------------------------------------------------------*/
 113          
 114          unsigned char ListaComandos(unsigned char *cmd)
C51 COMPILER V9.59.0.0   PROG                                                              08/05/2020 11:21:05 PAGE 3   

 115          {
 116   1         unsigned char buf[LONGSIZE];
 117   1         unsigned char i;
 118   1         
 119   1         for (i=0; i<NUMCOMMAND; i++)
 120   1         {
 121   2            strcpy(buf, &comandos[i][0]);
 122   2            if (strcmp(buf, cmd)==0)
 123   2               return(i);
 124   2         }
 125   1         
 126   1         return(0xFF);
 127   1      }
 128          
 129          
 130          /*------------------------------------------------------------------------------
 131          Rutina que valida la clave
 132          ------------------------------------------------------------------------------*/
 133          unsigned char  ValidarClave(unsigned char *buffer)
 134          {
 135   1      unsigned char buf [7];
 136   1        
 137   1            strcpy(buf, &validacion[0]);
 138   1            if (strcmp(buf, buffer)==0)
 139   1               return(0);
 140   1       
 141   1         
 142   1         return(0xFF);
 143   1      }
 144          
 145          
 146          
 147          /*------------------------------------------------------------------------------
 148          Rutina que busca el \
 149          ------------------------------------------------------------------------------*/
 150          unsigned char * GetCMD(unsigned char *in)
 151          {
 152   1         char tokens[]=" \r\n";
 153   1         return(strtok(in,tokens));
 154   1      }
 155          
 156          /*------------------------------------------------------------------------------
 157          Rutina de 
 158          ------------------------------------------------------------------------------*/
 159          unsigned char * GetOption(unsigned char *in)
 160          {
 161   1         unsigned char tokensSpace[]=" \r\n";
 162   1         unsigned char tokensQuote[]="\"\r\n";
 163   1         
 164   1         //trim leading spaces
 165   1         while (*in==' ')
 166   1            in++;
 167   1         
 168   1         //if first char is a quote, then end token on a quote.  ELSE end token on a space
 169   1         if (*in == '\"')
 170   1            return(strtok(in,tokensQuote));
 171   1         else
 172   1            return(strtok(in,tokensSpace));
 173   1      } 
 174          /*------------------------------------------------------------------------------
 175          Rutina de muestra el cursor
 176          ------------------------------------------------------------------------------*/
C51 COMPILER V9.59.0.0   PROG                                                              08/05/2020 11:21:05 PAGE 4   

 177          
 178          void DisplayCursor(void)
 179          {
 180   1         printf("\r\n\n%s> ", cursor);
 181   1      }
 182          
 183          /*------------------------------------------------------------------------------
 184          Rutina que captura los datos pto serie y los muestra en el pto
 185          ------------------------------------------------------------------------------*/
 186          
 187          void IngresaDato(unsigned char  *buffer, unsigned char modo)
 188          {
 189   1      
 190   1       int i;
 191   1       
 192   1        do
 193   1        { 
 194   2          *buffer = _getkey();
 195   2        if (modo == 0) 
 196   2          {
 197   3             printf("%c", *buffer);
 198   3          }
 199   2          else 
 200   2          {
 201   3            putchar('*');
 202   3          }
 203   2           i=*buffer; 
 204   2           buffer++;
 205   2          *buffer='\0'; 
 206   2          
 207   2        } while(i != '\r');
 208   1          
 209   1            
 210   1               
 211   1      } 
 212          /*
 213          void LeerMemoria(unsigned int  addres,unsigned char  *res)
 214          {
 215          unsigned char i;
 216            do {
 217              *res=rd_eeprom(0xa8,addres);
 218              i=*res;
 219              addres++;
 220              res++;
 221              }while(i !='\0');
 222              *res='\0';
 223          }
 224          */
 225          /*------------------------------------------------------------------------------
 226          Rutina que programa el id_cliente en eeprom
 227          ------------------------------------------------------------------------------*/
 228          void prog_id_cliente()
 229          {
 230   1        unsigned char buffer[10];
 231   1        unsigned int dataee;
 232   1        
 233   1        dataee=rd_eeprom(0xa8,EE_ID_CLIENTE);                                         /*se lee el id_cliente actual */
 234   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
 235   1        
 236   1        printf("\r\n\n ACTUAL ID_CLIENTE=%s\r\n\n",buffer);                           /*se muestra el id_cliente actual en pan
             -talla*/
 237   1        
C51 COMPILER V9.59.0.0   PROG                                                              08/05/2020 11:21:05 PAGE 5   

 238   1        printf("\r\n\n DIGITE SU NUEVO ID_CLIENTE=");                                 /*digite el nuevo id_cliente*/
 239   1        IngresaDato(buffer,0);                                                        /*trae el dato digitado*/
 240   1        dataee=atoi(buffer);                                                          /*lo convierto a un dato hex*/
 241   1        wr_eeprom(0xa8,EE_ID_CLIENTE,dataee);                                         /*grabo el dato en la eeprom*/
 242   1        
 243   1        dataee=rd_eeprom(0xa8,EE_ID_CLIENTE);                                         /*leo el dato grabado*/
 244   1        sprintf(buffer,"%d",dataee);                                                  /*lo convierto a un string*/
 245   1        printf("\r\n\n DATO MODIFICADO ID_CLIENTE=%s\r\n\n",buffer);                  /*lo muetro por la pantalla el dato 
             -grabado*/
 246   1      }
 247          /*------------------------------------------------------------------------------
 248          Rutina que programa el cod_park
 249          ------------------------------------------------------------------------------*/
 250          void prog_cod_park()
 251          {
 252   1        unsigned char buffer[10];
 253   1        unsigned int dataee;
 254   1        
 255   1        dataee=rd_eeprom(0xa8,EE_ID_PARK);                                          /*se lee el id_cliente actual */
 256   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
 257   1        
 258   1        printf("\r\n\n ACTUAL COD_PARK=%s\r\n\n",buffer);                           /*se muestra el id_cliente actual en panta
             -lla*/
 259   1        
 260   1        printf("\r\n\n DIGITE SU NUEVO COD_PARK=");                                 /*digite el nuevo id_cliente*/
 261   1        IngresaDato(buffer,0);                                                        /*trae el dato digitado*/
 262   1        dataee=atoi(buffer);                                                          /*lo convierto a un dato hex*/
 263   1        wr_eeprom(0xa8,EE_ID_PARK,dataee);                                          /*grabo el dato en la eeprom*/
 264   1        
 265   1        dataee=rd_eeprom(0xa8,EE_ID_PARK);                                          /*leo el dato grabado*/
 266   1        sprintf(buffer,"%d",dataee);                                                  /*lo convierto a un string*/
 267   1        printf("\r\n\n DATO MODIFICADO COD_PARK=%s\r\n\n",buffer);                  /*lo muetro por la pantalla el dato gr
             -abado*/
 268   1      }
 269          /*------------------------------------------------------------------------------
 270          Rutina que programa el tiempo de gracia de cobro (00) no tiene tiempo de gracia
 271          ------------------------------------------------------------------------------*/
 272          void Prog_tiempo_gracia()
 273          {
 274   1        unsigned char buffer[10];
 275   1        unsigned int dataee;
 276   1        
 277   1        dataee=rd_eeprom(0xa8,EE_TIEMPO_GRACIA);                                          /*se lee el id_cliente actual */
 278   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
 279   1        
 280   1        printf("\r\n\n ACTUAL TIEMPO_GRACIA=%s\r\n\n",buffer);                            /*se muestra el id_cliente actual en 
             -pantalla*/
 281   1        
 282   1        printf("\r\n\n DIGITE SU NUEVO TIEMPO_GRACIA=");                                  /*digite el nuevo id_cliente*/
 283   1        IngresaDato(buffer,0);                                                        /*trae el dato digitado*/
 284   1        dataee=atoi(buffer);                                                          /*lo convierto a un dato hex*/
 285   1        wr_eeprom(0xa8,EE_TIEMPO_GRACIA,dataee);                                          /*grabo el dato en la eeprom*/
 286   1        
 287   1        dataee=rd_eeprom(0xa8,EE_TIEMPO_GRACIA);                                        /*leo el dato grabado*/
 288   1        sprintf(buffer,"%d",dataee);                                                  /*lo convierto a un string*/
 289   1        printf("\r\n\n DATO MODIFICADO TIEMPO_GRACIA=%s\r\n\n",buffer);               /*lo muetro por la pantalla el dat
             -o grabado*/
 290   1      }
 291          /*------------------------------------------------------------------------------
 292          Rutina que programa SIN COBRO
 293          SIN_COBRO=0 inhabilitado, SIN_COBRO=1 sin cobro, SIN_COBRO=2 sin cobro y salida el mismo dia");
 294          ------------------------------------------------------------------------------*/
C51 COMPILER V9.59.0.0   PROG                                                              08/05/2020 11:21:05 PAGE 6   

 295          void Prog_Sin_Cobro()
 296          {
 297   1        
 298   1      
 299   1        unsigned char buffer[10];
 300   1        unsigned int dataee;
 301   1      
 302   1        dataee=rd_eeprom(0xa8,EE_SIN_COBRO);                                          /*se lee el id_cliente actual */
 303   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
 304   1        if(dataee==0)
 305   1        {
 306   2          printf("\r\n\n ACTUAL SIN_COBRO INHABILITADO=%s\r\n\n",buffer);                           /*se muestra el id_cliente 
             -actual en pantalla*/
 307   2        }
 308   1        else if (dataee==1)
 309   1        {
 310   2          printf("\r\n\n ACTUAL SIN_COBRO GRATIS=%s\r\n\n",buffer);   
 311   2        }
 312   1        else 
 313   1        {
 314   2            printf("\r\n\n ACTUAL SIN_COBRO GRATIS Y SALIDA EL MISMO DIA=%s\r\n\n",buffer);   
 315   2        }
 316   1        
 317   1        printf("\r\n\n DIGITE SU NUEVO SIN_COBRO=");                                  /*digite el nuevo id_cliente*/
 318   1        IngresaDato(buffer,0);                                                        /*trae el dato digitado*/
 319   1        dataee=atoi(buffer);                                                          /*lo convierto a un dato hex*/
 320   1        wr_eeprom(0xa8,EE_SIN_COBRO,dataee);                                          /*grabo el dato en la eeprom*/
 321   1        
 322   1        dataee=rd_eeprom(0xa8,EE_SIN_COBRO);                                        /*leo el dato grabado*/
 323   1        sprintf(buffer,"%d",dataee);                                                  /*lo convierto a un string*/
 324   1        if(dataee==0)
 325   1        {
 326   2          printf("\r\n\n ACTUAL SIN_COBRO INHABILITADO=%s\r\n\n",buffer);                           /*se muestra el id_cliente 
             -actual en pantalla*/
 327   2        }
 328   1        else if (dataee==1)
 329   1        {
 330   2          printf("\r\n\n ACTUAL SIN_COBRO GRATIS=%s\r\n\n",buffer);   
 331   2        }
 332   1        else 
 333   1        {
 334   2            printf("\r\n\n ACTUAL SIN_COBRO GRATIS Y SALIDA EL MISMO DIA=%s\r\n\n",buffer);   
 335   2        }
 336   1        
 337   1      }
 338          /*------------------------------------------------------------------------------------
 339          Rutina que habilita el debuger
 340           Habilita = 1 ; 
 341          inahabilita = 0;
 342          --------------------------------------------------------------------------------------*/
 343          void Prog_debug()
 344          {
 345   1        unsigned char buffer[10];
 346   1        unsigned int dataee;
 347   1      
 348   1        
 349   1        dataee=rd_eeprom(0xa8,EE_DEBUG);                                          /*se lee el id_cliente actual */
 350   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
 351   1        if(dataee==0)
 352   1        {
 353   2          printf("\r\n\n ACTUAL DEBUG INHABILITADO=%s\r\n\n",buffer);                           /*se muestra el id_cliente actu
             -al en pantalla*/
C51 COMPILER V9.59.0.0   PROG                                                              08/05/2020 11:21:05 PAGE 7   

 354   2        }
 355   1        else
 356   1        {
 357   2          printf("\r\n\n ACTUAL DEBUG HABILITADO=%s\r\n\n",buffer);     
 358   2        }
 359   1        
 360   1        printf("\r\n\n DIGITE EL NUEVO ESTADO DE DEBUG=");                                  /*digite el nuevo id_cliente*/
 361   1        IngresaDato(buffer,0);                                                        /*trae el dato digitado*/
 362   1        dataee=atoi(buffer);                                                          /*lo convierto a un dato hex*/
 363   1        wr_eeprom(0xa8,EE_DEBUG,dataee);                                          /*grabo el dato en la eeprom*/
 364   1        
 365   1        dataee=rd_eeprom(0xa8,EE_DEBUG);                                        /*leo el dato grabado*/
 366   1        sprintf(buffer,"%d",dataee);  
 367   1        if(dataee==0)
 368   1        {
 369   2          printf("\r\n\n ACTUAL DEBUG INHABILITADO=%s\r\n\n",buffer);                           /*se muestra el id_cliente actu
             -al en pantalla*/
 370   2        }
 371   1        else
 372   1        {
 373   2          printf("\r\n\n ACTUAL DEBUG HABILITADO=%s\r\n\n",buffer);     
 374   2        }
 375   1      }
 376          /*------------------------------------------------------------------------------------
 377          
 378          --------------------------------------------------------------------------------------*/
 379          
 380          void Prog_Use_Lpr()
 381          {
 382   1          unsigned char buffer[10];
 383   1        unsigned int dataee;
 384   1      
 385   1        
 386   1        dataee=rd_eeprom(0xa8,EE_USE_LPR);                                          /*se lee el id_cliente actual */
 387   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
 388   1        if(dataee==0)
 389   1        {
 390   2          printf("\r\n\n ACTUAL USE_LPR INHABILITADO=%s\r\n\n",buffer);                           /*se muestra el id_cliente ac
             -tual en pantalla*/
 391   2        }
 392   1        else
 393   1        {
 394   2          printf("\r\n\n ACTUAL USE_LPR HABILITADO=%s\r\n\n",buffer);     
 395   2        }
 396   1        
 397   1        printf("\r\n\n DIGITE EL NUEVO ESTADO DE USE_LPR=");                                  /*digite el nuevo id_cliente*/
 398   1        IngresaDato(buffer,0);                                                        /*trae el dato digitado*/
 399   1        dataee=atoi(buffer);                                                          /*lo convierto a un dato hex*/
 400   1        wr_eeprom(0xa8,EE_USE_LPR,dataee);                                          /*grabo el dato en la eeprom*/
 401   1        
 402   1        dataee=rd_eeprom(0xa8,EE_USE_LPR);                                        /*leo el dato grabado*/
 403   1        sprintf(buffer,"%d",dataee);  
 404   1        if(dataee==0)
 405   1        {
 406   2          printf("\r\n\n ACTUAL USE_LPR INHABILITADO=%s\r\n\n",buffer);                           /*se muestra el id_cliente ac
             -tual en pantalla*/
 407   2        }
 408   1        else
 409   1        {
 410   2          printf("\r\n\n ACTUAL USE_LPR HABILITADO=%s\r\n\n",buffer);     
 411   2        }
 412   1      }
C51 COMPILER V9.59.0.0   PROG                                                              08/05/2020 11:21:05 PAGE 8   

 413          /*------------------------------------------------------------------------------------
 414          Compara la placa de la tarjeta y la del software
 415          --------------------------------------------------------------------------------------*/
 416          void Prog_Comparacion_Activa()
 417          {
 418   1        unsigned char buffer[10];
 419   1        unsigned int dataee;
 420   1      
 421   1        
 422   1        dataee=rd_eeprom(0xa8,EE_CPRCN_ACTIVA);                                         /*se lee el id_cliente actual */
 423   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
 424   1        if(dataee==0)
 425   1        {
 426   2          printf("\r\n\n ACTUAL COMPARACION ACTIVA INHABILITADO=%s\r\n\n",buffer);                            /*se muestra el id
             -_cliente actual en pantalla*/
 427   2        }
 428   1        else
 429   1        {
 430   2          printf("\r\n\n ACTUAL COMPARACION ACTIVA  HABILITADO=%s\r\n\n",buffer);     
 431   2        }
 432   1        
 433   1        printf("\r\n\n DIGITE EL NUEVO ESTADO DE COMPARACION ACTIVA =");                                  /*digite el nuevo id_cli
             -ente*/
 434   1        IngresaDato(buffer,0);                                                        /*trae el dato digitado*/
 435   1        dataee=atoi(buffer);                                                          /*lo convierto a un dato hex*/
 436   1        wr_eeprom(0xa8,EE_CPRCN_ACTIVA,dataee);                                         /*grabo el dato en la eeprom*/
 437   1        
 438   1        dataee=rd_eeprom(0xa8,EE_CPRCN_ACTIVA);                                       /*leo el dato grabado*/
 439   1        sprintf(buffer,"%d",dataee);  
 440   1        if(dataee==0)
 441   1        {
 442   2          printf("\r\n\n ACTUAL COMPARACION ACTIVA  INHABILITADO=%s\r\n\n",buffer);                           /*se muestra el i
             -d_cliente actual en pantalla*/
 443   2        }
 444   1        else
 445   1        {
 446   2          printf("\r\n\n ACTUAL COMPARACION ACTIVA  HABILITADO=%s\r\n\n",buffer);     
 447   2        }
 448   1      }
 449          /*------------------------------------------------------------------------------------
 450          cmd del tipo de pantalla a usar
 451          Rasberry = 1
 452          lcd = 0
 453          --------------------------------------------------------------------------------------*/
 454          void tipo_pantalla()
 455          {
 456   1        unsigned char buffer[10];
 457   1        unsigned int dataee;
 458   1      
 459   1        
 460   1        dataee=rd_eeprom(0xa8,EE_TIPO_PANTALLA);                                          /*se lee el id_cliente actual */
 461   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
 462   1        if(dataee==0)
 463   1        {
 464   2          printf("\r\n\n PANTALLA LCD HABILITADA=%s\r\n\n",buffer);                           /*se muestra el id_cliente actual
             - en pantalla*/
 465   2        }
 466   1        else
 467   1        {
 468   2          printf("\r\n\n PANTALLA RASPBERRY  HABILITADA=%s\r\n\n",buffer);      
 469   2        }
 470   1        
C51 COMPILER V9.59.0.0   PROG                                                              08/05/2020 11:21:05 PAGE 9   

 471   1        printf("\r\n\n DIGITE EL NUEVO ESTADO DE LA PANTALLA =");                                 /*digite el nuevo id_cliente*/
 472   1        IngresaDato(buffer,0);                                                        /*trae el dato digitado*/
 473   1        dataee=atoi(buffer);                                                          /*lo convierto a un dato hex*/
 474   1        wr_eeprom(0xa8,EE_TIPO_PANTALLA,dataee);                                          /*grabo el dato en la eeprom*/
 475   1        
 476   1        dataee=rd_eeprom(0xa8,EE_TIPO_PANTALLA);                                        /*leo el dato grabado*/
 477   1        sprintf(buffer,"%d",dataee);  
 478   1        if(dataee==0)
 479   1        {
 480   2          printf("\r\n\n PANTALLA LCD HABILITADA=%s\r\n\n",buffer);                           /*se muestra el id_cliente actual
             - en pantalla*/
 481   2        }
 482   1        else
 483   1        {
 484   2          printf("\r\n\n PANTALLA RASPBERRY  HABILITADA=%s\r\n\n",buffer);      
 485   2        }
 486   1        
 487   1      }
 488          /*------------------------------------------------------------------------------------
 489          cmd que habilita si pasa por caja si no
 490          (0) pasa por caja
 491          (1) aplica el descuento
 492          ------------------------------------------------------------------------------------*/
 493          void dcto_caja()
 494          {
 495   1        unsigned char buffer[10];
 496   1        unsigned int dataee;
 497   1      
 498   1        
 499   1        dataee=rd_eeprom(0xa8,EE_DCTO_PASA_CAJA);                                         /*se lee el id_cliente actual */
 500   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
 501   1        if(dataee==0)
 502   1        {
 503   2          printf("\r\n\n PASA POR CAJA PARA VALIDAR DCTO=%s\r\n\n",buffer);                           /*se muestra el id_client
             -e actual en pantalla*/
 504   2        }
 505   1        else
 506   1        {
 507   2          printf("\r\n\n APLICA DESCUENTO=%s\r\n\n",buffer);      
 508   2        }
 509   1        
 510   1        printf("\r\n\n DIGITE EL NUEVO ESTADO DE DCTO =");                                  /*digite el nuevo id_cliente*/
 511   1        IngresaDato(buffer,0);                                                        /*trae el dato digitado*/
 512   1        dataee=atoi(buffer);                                                          /*lo convierto a un dato hex*/
 513   1        wr_eeprom(0xa8,EE_DCTO_PASA_CAJA,dataee);                                         /*grabo el dato en la eeprom*/
 514   1        
 515   1        dataee=rd_eeprom(0xa8,EE_DCTO_PASA_CAJA);                                       /*leo el dato grabado*/
 516   1        sprintf(buffer,"%d",dataee);  
 517   1        if(dataee==0)
 518   1        {
 519   2          printf("\r\n\n PASA POR CAJA PARA VALIDAR DCTO=%s\r\n\n",buffer);                           /*se muestra el id_client
             -e actual en pantalla*/
 520   2        }
 521   1        else
 522   1        {
 523   2          printf("\r\n\n APLICA DESCUENTO=%s\r\n\n",buffer);      
 524   2        }
 525   1      }
 526          /*------------------------------------------------------------------------------
 527          Rutina que muestra la lista de comandos
 528          ------------------------------------------------------------------------------*/
 529          void Show()
C51 COMPILER V9.59.0.0   PROG                                                              08/05/2020 11:21:05 PAGE 10  

 530          {
 531   1         printf("\r\n ID_CLIENTE    --- CMD 0 Identificador del cliente maximo 255");
 532   1         printf("\r\n COD_PARK      --- CMD 1 El numero del parqueadero maximo 255");
 533   1         printf("\r\n T_GRACIA      --- CMD 2 Tiempo sin cobro 00,  maximo 255");
 534   1         printf("\r\n SIN_COBRO     --- CMD 3 Inhabilitado= 0, Gratis= 1 , Gratis y salida el mismo dia= 2");
 535   1         printf("\r\n DEBUG         --- CMD 4 Habilitar = 1, Inhabilitar = 0");
 536   1         printf("\r\n USE_LPR       --- CMD 5 Habilitar = 1, Inhabilitar = 0");
 537   1         printf("\r\n COMPARACION_ACTIVA --- CMD 6 Habilitar = 1, Inhabilitar = 0");
 538   1         printf("\r\n TIPO_PANTALLA     --- CMD 7 (0) pantalla lcd  serie (1) raspberry o bluetooth");
 539   1         printf("\r\n DCTO_PASA_CAJA     --- CMD 8 (0) pasa por caja (1) aplica el descuento");
 540   1         printf("\r\n AYUDA         --- CMD 9 Muestra los comandos");
 541   1         printf("\r\n SALIR         --- CMD 10 Salir de programacion");
 542   1      
 543   1      }
 544          
 545          /*------------------------------------------------------------------------------
 546          Rutina de principal de programacion
 547          ------------------------------------------------------------------------------*/
 548          
 549          void menu(void)
 550          {
 551   1      
 552   1      unsigned char *cmd,*option1,*option2,*usuario;
 553   1      unsigned char opt_buffer[40];
 554   1      unsigned char buffer[40];
 555   1      
 556   1      
 557   1      
 558   1        
 559   1        printf("\r\n\nSistema de Programacion verificador lintech \r\n\r\n");
 560   1      
 561   1       
 562   1        
 563   1        
 564   1        do{
 565   2        printf("\r\n\n/>Usuario:");
 566   2        
 567   2        // main loop
 568   2        IngresaDato(buffer,0);          //ingreso el usuario por teclado 
 569   2        cmd = GetCMD(buffer);         //quita el carri return 
 570   2        usuario=hash_id(buffer);        //el usuario es encriptado
 571   2      }while(ValidarClave(cmd)!=0);       //validamos el usuario
 572   1      
 573   1      
 574   1        do{
 575   2      printf("\r\n\n/>Password:");
 576   2      
 577   2        IngresaDato(buffer,1);          //ingreso el password por teclado 
 578   2        cmd = GetCMD(buffer);         //quita el carri return 
 579   2        strcpy (validacion,"123456");
 580   2        //strcpy (validacion,usuario);    /*valida el valor encriptado*/
 581   2      
 582   2        }while(ValidarClave(cmd)!=0);       //
 583   1      
 584   1        
 585   1        Show();
 586   1        while(1)
 587   1        {
 588   2        DisplayCursor();
 589   2      
 590   2      
 591   2          IngresaDato(buffer,0);  
C51 COMPILER V9.59.0.0   PROG                                                              08/05/2020 11:21:05 PAGE 11  

 592   2          cmd = GetCMD(buffer); 
 593   2          option1 = GetOption(cmd + strlen(cmd) + 1);
 594   2          option2 = GetOption(option1 + strlen(option1) + 1);  
 595   2      
 596   2         //si empieza con un '/', eso significa que incluye el caminoa
 597   2            //al archivo.  si el archivo no empieza con un '/', debe agregarce 
 598   2            //la ruta del archivo.
 599   2            if (option1 && (option1[0]=='/'))
 600   2            {
 601   3               //option1 is a full path
 602   3               strcpy(opt_buffer, option1);
 603   3            }
 604   2            else if (option1)
 605   2            {
 606   3               // tack on the current working directory to option1
 607   3               strcpy(opt_buffer, cursor);
 608   3               strcat(opt_buffer, option1);
 609   3            }         
 610   2      
 611   2      
 612   2      
 613   2      
 614   2      
 615   2          if (cmd)
 616   2            {
 617   3               switch(ListaComandos(cmd))
 618   3               {
 619   4                  case 0:                     /*Se programa la identificacion del cliente*/
 620   4                    prog_id_cliente();
 621   4                  
 622   4                   break;
 623   4                  
 624   4                  case 1:  //Tiempo de recolecion entre muestra
 625   4                  prog_cod_park();
 626   4                     break;
 627   4                  
 628   4                  case 2:  //Informacion recolectada enviada al rs232
 629   4          
 630   4                  Prog_tiempo_gracia();
 631   4                
 632   4                     break;
 633   4                  
 634   4                  case 3:  //Ajuste del cero del sensor
 635   4                  Prog_Sin_Cobro();
 636   4      
 637   4                     break;
 638   4                  
 639   4                  case 4:  //Ajuste de calibracion por medio de la pendiente
 640   4                    Prog_debug();
 641   4                     break;
 642   4                  case 5:  //help me
 643   4                    Prog_Use_Lpr();
 644   4                     break;
 645   4                  case 6:  //help me
 646   4                 Prog_Comparacion_Activa();
 647   4      
 648   4                     break;
 649   4                  case 7:     //tipo de pantalla
 650   4                  tipo_pantalla();
 651   4                    break;
 652   4                  
 653   4                  case 8:     //tipo de pantalla
C51 COMPILER V9.59.0.0   PROG                                                              08/05/2020 11:21:05 PAGE 12  

 654   4                  dcto_caja();
 655   4                    break;
 656   4                  case 9:  //help me
 657   4                 
 658   4                    Show();
 659   4                     break;
 660   4                  case 10:  //salir
 661   4                  return;
 662   4      
 663   4                     break;
 664   4                 
 665   4          
 666   4                
 667   4                  default:
 668   4                     printf("\r\nComando no existe '%s'", cmd);
 669   4                     break;
 670   4              }
 671   3            }
 672   2        }
 673   1      }
 674          
 675            
 676          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3653    ----
   CONSTANT SIZE    =   1988    ----
   XDATA SIZE       =     66     293
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
