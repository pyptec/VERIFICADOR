C51 COMPILER V9.59.0.0   CLOCK                                                             11/04/2020 14:30:47 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE CLOCK
OBJECT MODULE PLACED IN .\Objects\Clock.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Clock.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listin
                    -gs\Clock.lst) TABS(2) OBJECT(.\Objects\Clock.obj)

line level    source

   1          
   2          #include <Clock.h>
   3          #include <reg51.h>
   4          
   5          /*funcion prototipo*/
   6          extern void Delay (void);
   7          extern void Delay_20us(unsigned int cnt);
   8          extern void Debug_Fecha_actual(unsigned char *buffer);
   9          extern float pow   (float x, float y);
  10          /*variables externas */
  11          extern unsigned char  Debug_Tibbo;
  12          
  13          sbit sck = P1^4 ;                 /* define I/O functions     */
  14          sbit io  = P1^5 ;
  15          sbit rst = P1^6 ;
  16          /*CMD DE ESCRITURA RELOJ*/
  17          #define WDIA            0x86
  18          #define WMES            0x88
  19          #define WANO            0x8C
  20          #define WHORA           0x84
  21          #define WMIN            0x82
  22          #define WSEG            0x80
  23          #define WDIA_SEMANA     0x8A
  24          /*CMD DE LECTURA DEL RELOJ*/
  25          #define RDIA            0x87
  26          #define RMES            0x89
  27          #define RANO            0x8D
  28          #define RHORA           0x85
  29          #define RMIN            0x83
  30          #define RSEG            0x81
  31          #define RDIA_SEMANA     0x8B
  32          
  33          #define True                    0x01
  34          #define False                   0x00
  35          
  36          unsigned char data_clk;
  37          //*********************************************************************************
  38          
  39          //*********************************************************************************
  40          void p_ck (void)
  41          {
  42   1          sck=1;
  43   1          Delay();
  44   1          sck=0;
  45   1      }
  46          //*********************************************************************************
  47          void eb_clk(char dir_clk) {
  48   1        int nbits;
  49   1        for (nbits=0; nbits<8; nbits++)
  50   1        {
  51   2          dir_clk >>=1;
  52   2          if (CY==1)
  53   2          { 
  54   3            io=1;
C51 COMPILER V9.59.0.0   CLOCK                                                             11/04/2020 14:30:47 PAGE 2   

  55   3          }
  56   2          else
  57   2          {
  58   3            io=0;
  59   3          }
  60   2          p_ck();
  61   2        }
  62   1      }
  63          //*********************************************************************************
  64          char lee_clk (unsigned char dir_clk) {            
  65   1      int nbits;
  66   1        rst=1;
  67   1        Delay_20us(3);
  68   1        eb_clk(dir_clk);
  69   1        for (nbits=0; nbits<8; nbits++)
  70   1        {
  71   2          if (io==1) 
  72   2          {
  73   3          data_clk = data_clk | 0x80;
  74   3          if (nbits<=6) {
  75   4           data_clk >>=1;
  76   4           }
  77   3          }
  78   2          if (io==0)
  79   2          {
  80   3            data_clk = data_clk & 0x7F;
  81   3          if (nbits<=6) 
  82   3           {
  83   4            data_clk >>=1;
  84   4           }
  85   3          }
  86   2          p_ck();
  87   2          } 
  88   1        rst=0;
  89   1        return data_clk;
  90   1      }
  91          //*********************************************************************************
  92          void wr_clk (unsigned char dir_clk, unsigned char byte) {            
  93   1        rst=1;
  94   1        Delay_20us(3);
  95   1        eb_clk(dir_clk);
  96   1        dir_clk=byte;
  97   1        eb_clk(dir_clk);
  98   1        rst=0;
  99   1        
 100   1       }
 101          //****************************************************************************
 102           unsigned char two_one (unsigned char byte_h,unsigned char byte_l)
 103          {
 104   1        unsigned char byte_out;
 105   1        byte_h=byte_h&0x0f;
 106   1        byte_h<<=4;
 107   1        byte_l=byte_l&0x0f;
 108   1        byte_out=byte_h|byte_l;
 109   1        return byte_out;
 110   1      }
 111          /*------------------------------------------------------------------------------
 112          
 113          ------------------------------------------------------------------------------*/
 114          unsigned char validar_clk(unsigned char *datos_clock)
 115          {
 116   1        unsigned char validador=0;
C51 COMPILER V9.59.0.0   CLOCK                                                             11/04/2020 14:30:47 PAGE 3   

 117   1        
 118   1        
 119   1          if ((*datos_clock >= '0') &&(*datos_clock <= '9'))                                /*valida el dia parte alta */
 120   1          {
 121   2          
 122   2             if ((*(datos_clock+1) >= '0') &&(*(datos_clock+1) <= '9'))                     /*valida el dia parte baja*/
 123   2            {
 124   3              
 125   3               if ((*(datos_clock+3) >= '0') &&(*(datos_clock+3) <= '9'))             /*valida el mes parte alta*/
 126   3              {
 127   4                if ((*(datos_clock+4) >= '0') &&(*(datos_clock+4) <= '9'))            /*valida el mes parte baja */
 128   4                {
 129   5                 if ((*(datos_clock+8) >= '0') &&(*(datos_clock+8) <= '9'))         /*año baja*/      
 130   5                  {
 131   6                   if ((*(datos_clock+0x0b) >= '0')&&(*(datos_clock+0x0b) <= '9'))          /*hora alta*/ 
 132   6                    {
 133   7                    if ((*(datos_clock+0x0c) >= '0') &&(*(datos_clock+0x0c) <= '9'))          /*hora baja*/ 
 134   7                      {
 135   8                     if ((*(datos_clock+0x0e) >= '0') &&(*(datos_clock+0x0e) <= '9'))       /*minutos alta*/
 136   8                        {
 137   9                      if ((*(datos_clock+0x0f) >= '0') &&(*(datos_clock+0x0f) <= '9'))        /*minutos baja*/
 138   9                        {
 139  10                       if ((*(datos_clock+0x11) >= '0') &&(*(datos_clock+0x11) <= '9'))       /*segundos alta*/
 140  10                            {
 141  11                        if ((*(datos_clock+0x12) >= '0') &&(*(datos_clock+0x12) <= '9'))        /*segundos baja*/
 142  11                          {
 143  12                          if ((*(datos_clock+0x14) >= '0') &&(*(datos_clock+0x14) <= '9'))        /*dia de la semana*/
 144  12                           {
 145  13                                  validador=0;
 146  13                           }
 147  12                              }
 148  11                              else
 149  11                              {
 150  12                                validador =1;
 151  12                              }
 152  11                            }
 153  10                            else
 154  10                            {
 155  11                              validador =1;
 156  11                          
 157  11                            }
 158  10                          }
 159   9                          else
 160   9                          {
 161  10                            validador =1;
 162  10                        
 163  10                          }
 164   9                      
 165   9                        }
 166   8                        else
 167   8                        {
 168   9                          validador =1;
 169   9                        
 170   9                        }
 171   8                      }
 172   7                      else
 173   7                      {
 174   8                        validador =1;
 175   8                        //break;
 176   8                      }
 177   7                    }
 178   6                    else
C51 COMPILER V9.59.0.0   CLOCK                                                             11/04/2020 14:30:47 PAGE 4   

 179   6                    {
 180   7                      validador =1;
 181   7                      
 182   7                    }               
 183   6                  }
 184   5                  else
 185   5                  {
 186   6                    validador =1;
 187   6                    
 188   6                  }
 189   5                }
 190   4                
 191   4              }
 192   3              else
 193   3              {
 194   4                validador =1;
 195   4                
 196   4              }
 197   3            
 198   3            }
 199   2            
 200   2            else
 201   2            {
 202   3              validador =1;
 203   3            
 204   3            }
 205   2          
 206   2          }
 207   1          
 208   1          else 
 209   1          {
 210   2            validador =1;
 211   2            
 212   2          }
 213   1        
 214   1        return validador;
 215   1        
 216   1      }
 217          /*------------------------------------------------------------------------------
 218          Escribo el reloj en ascii en bloque 
 219          
 220          ------------------------------------------------------------------------------*/
 221          
 222          void Block_write_clock_ascii(unsigned char *datos_clock)  
 223          
 224          {     
 225   1      //dia,mes,año,hora,minutos,segundos,Dia de la semana 
 226   1          
 227   1            /*dia*/
 228   1            wr_clk(WDIA,two_one(*datos_clock,*(datos_clock+1)));                    //dia
 229   1            datos_clock++;
 230   1            datos_clock++;
 231   1            datos_clock++;
 232   1            /*mes*/
 233   1            wr_clk(WMES,two_one(*datos_clock,*(datos_clock+1)));                    //mes
 234   1            datos_clock++;
 235   1            datos_clock++;
 236   1            datos_clock++;
 237   1            datos_clock++;
 238   1            datos_clock++;
 239   1            /*año*/
 240   1            wr_clk(WANO,two_one(*datos_clock,*(datos_clock+1)));                    //año
C51 COMPILER V9.59.0.0   CLOCK                                                             11/04/2020 14:30:47 PAGE 5   

 241   1            datos_clock++;
 242   1            datos_clock++;
 243   1            datos_clock++;
 244   1            /*hora*/
 245   1            wr_clk(WHORA,two_one(*datos_clock,*(datos_clock+1)));                   //hora
 246   1            datos_clock++;
 247   1            datos_clock++;
 248   1            datos_clock++;
 249   1            /*minutos*/
 250   1            wr_clk(WMIN,two_one(*datos_clock,*(datos_clock+1)));                    //minutos
 251   1            datos_clock++;
 252   1            datos_clock++;
 253   1            datos_clock++;
 254   1            /*segundos*/
 255   1            wr_clk(WSEG,two_one(*datos_clock,*(datos_clock+1)));                    //segundos
 256   1            datos_clock++;
 257   1            datos_clock++;
 258   1            datos_clock++;
 259   1            /*dia de la semana*/
 260   1            wr_clk(WDIA_SEMANA,(*datos_clock&0x0f));                                //dia de la semana
 261   1        
 262   1      }
 263          /*------------------------------------------------------------------------------
 264          rutinas de conversiones  de bcd a hex
 265          ------------------------------------------------------------------------------*/
 266          unsigned char bcd_hex (unsigned char l_data)
 267           {
 268   1        unsigned char temp,j;
 269   1        temp=l_data;
 270   1        temp>>=4;
 271   1        temp=temp & 0x0f;
 272   1        if (temp!=0x00)
 273   1        {
 274   2          l_data=l_data & 0x0f;
 275   2          for (j=0;j<temp;j++)
 276   2          {
 277   3              l_data=l_data+0x0a;
 278   3          } 
 279   2        }
 280   1        return l_data;
 281   1       }
 282           /*------------------------------------------------------------------------------
 283           Rutina que convierte de Hex a bcd 
 284          ------------------------------------------------------------------------------*/
 285           unsigned char hex_bcd (unsigned char byte)
 286          {
 287   1        unsigned char nibble_h; 
 288   1        unsigned char nibble_l;
 289   1        unsigned char k,byte_out;
 290   1      
 291   1        nibble_h=0x00;
 292   1        nibble_l=0x00;
 293   1      
 294   1        for (k=0;k<byte;k++)
 295   1        {
 296   2          nibble_l=nibble_l+0x01;
 297   2          if (nibble_l==0x0a)
 298   2          {
 299   3            nibble_l=0x00;
 300   3            nibble_h=nibble_h+0x01;
 301   3          }
 302   2         }
C51 COMPILER V9.59.0.0   CLOCK                                                             11/04/2020 14:30:47 PAGE 6   

 303   1         nibble_h<<=4;
 304   1         nibble_h=nibble_h & 0xf0;
 305   1         nibble_l=nibble_l & 0x0f;
 306   1         byte_out=(nibble_h | nibble_l);
 307   1         return byte_out;
 308   1        
 309   1      }
 310          /*------------------------------------------------------------------------------
 311            CONVIERTE DE 1BYTE HEXADECIMAL A DECIMAL                      
 312          valorhex= pasa el byte en Hex y lo convierte en decimal
 313          buffer=   se debuelve la conversion en un arreglo en ascii
 314          ------------------------------------------------------------------------------*/
 315          void ByteHex_Decimal(unsigned char *buffer,unsigned char valorhex)
 316          {
 317   1        unsigned char numero, centena, decena;
 318   1      
 319   1        centena=0;
 320   1        decena=0;
 321   1        numero=valorhex;
 322   1      
 323   1        while (numero>=0x064)                           /* resto centena en ascii100*/
 324   1        {
 325   2          numero=numero-0x64;
 326   2          centena=centena+1;
 327   2        }
 328   1          *buffer=centena|0x30;
 329   1          buffer++;
 330   1        while (numero>=0x0a)                            /* resto 10 decena en ascii*/
 331   1        {
 332   2          numero=numero-0x0a;
 333   2          decena=decena+1;
 334   2        }
 335   1        *buffer=decena|0x30;
 336   1        buffer++;
 337   1        *buffer=numero|0x30;                            /*unidad en ascii */
 338   1        buffer++;
 339   1        *buffer= 0;
 340   1      
 341   1      }
 342          /*------------------------------------------------------------------------------
 343            CONVIERTE DE 2BYTE HEXADECIMAL A DECIMAL                      
 344          
 345          ------------------------------------------------------------------------------*/
 346          void Two_ByteHex_Decimal(unsigned char *buffer,unsigned char id_h,unsigned char id_l)
 347          {
 348   1        unsigned int valor,numero;
 349   1        unsigned char temp,dmil, mil, centena, decena;
 350   1      
 351   1        valor=0;
 352   1        dmil=0;
 353   1        mil=0;
 354   1        centena=0;
 355   1        decena=0;
 356   1        
 357   1         
 358   1        temp=id_h;
 359   1        temp=temp&0xf0;
 360   1        temp>>=4;
 361   1      
 362   1        valor=valor+(pow(16,3))*temp;
 363   1        temp=id_h;
 364   1        temp=temp&0x0f;
C51 COMPILER V9.59.0.0   CLOCK                                                             11/04/2020 14:30:47 PAGE 7   

 365   1        valor=valor+(pow(16,2))*temp;
 366   1      
 367   1        temp=id_l;
 368   1        temp=temp&0xf0;
 369   1        temp>>=4;
 370   1        valor=valor+(pow(16,1))*temp;
 371   1        temp=id_l;
 372   1        temp=temp&0x0f;
 373   1        valor=valor+(pow(16,0))*temp;
 374   1        numero=valor;
 375   1      
 376   1        while (numero>=0x2710)        // resto 10.000 
 377   1        {
 378   2          numero=numero-0x2710;
 379   2          dmil=dmil+1;
 380   2        }
 381   1        *buffer=dmil|0x30;
 382   1          buffer++;
 383   1        while (numero>=0x03e8)        // resto 1.000
 384   1        {
 385   2          numero=numero-0x03e8;
 386   2          mil=mil+1;
 387   2        }
 388   1        *buffer=mil|0x30;
 389   1          buffer++;
 390   1        while (numero>=0x064)         // resto 100
 391   1        {
 392   2          numero=numero-0x64;
 393   2          centena=centena+1;
 394   2        }
 395   1        *buffer=centena|0x30;
 396   1          buffer++;
 397   1        while (numero>=0x0a)        // resto 10
 398   1        {
 399   2          numero=numero-0x0a;
 400   2          decena=decena+1;
 401   2        }
 402   1        *buffer=decena|0x30;
 403   1        buffer++;
 404   1        *buffer=numero|0x30;
 405   1        buffer++;
 406   1        *buffer=0;
 407   1        
 408   1      }
 409          /*------------------------------------------------------------------------------
 410           Lee el dato del reloj en bloque 
 411          ------------------------------------------------------------------------------*/
 412          void Block_read_clock_ascii(unsigned char *datos_clock)
 413          {
 414   1        unsigned char dato;
 415   1      
 416   1        //dia,mes,año,hora,minutos
 417   1          
 418   1          /*año*/
 419   1          dato=lee_clk(RANO);
 420   1          *datos_clock=((dato&0xf0)>>4)| 0x30;      /*dato parte alta*/
 421   1          datos_clock++;
 422   1          *datos_clock=(dato&0x0f)| 0x30;           /*dato parte bajo*/
 423   1          datos_clock++;
 424   1        
 425   1        /*mes*/
 426   1          dato=lee_clk(RMES);
C51 COMPILER V9.59.0.0   CLOCK                                                             11/04/2020 14:30:47 PAGE 8   

 427   1          *datos_clock=((dato&0xf0)>>4)| 0x30;      /*dato parte alta*/
 428   1          datos_clock++;
 429   1          *datos_clock=(dato&0x0f)| 0x30;           /*dato parte bajo*/
 430   1          datos_clock++;    
 431   1      
 432   1          /*dia*/
 433   1          dato=lee_clk(RDIA);                       //;bcd_hex(lee_clk(DIA));
 434   1          *datos_clock=((dato&0xf0)>>4)| 0x30;      /*dato parte alta*/
 435   1          datos_clock++;
 436   1          *datos_clock=(dato&0x0f)| 0x30;           /*dato parte bajo*/
 437   1          datos_clock++;
 438   1          
 439   1          
 440   1          /*hora*/            
 441   1          dato=lee_clk(RHORA);
 442   1          *datos_clock=((dato&0xf0)>>4)| 0x30;      /*dato parte alta*/
 443   1          datos_clock++;
 444   1          *datos_clock=(dato&0x0f)| 0x30;           /*dato parte bajo*/
 445   1          datos_clock++;        
 446   1          
 447   1          /*minutos*/         
 448   1          dato=lee_clk(RMIN);
 449   1          *datos_clock=((dato&0xf0)>>4)| 0x30;      /*dato parte alta*/
 450   1          datos_clock++;
 451   1          *datos_clock=(dato&0x0f)| 0x30;           /*dato parte bajo*/
 452   1          datos_clock++;  
 453   1          *datos_clock=0;
 454   1                      
 455   1      } 
 456          void Block_read_Clock_Hex(unsigned char *datos_clock)
 457          {
 458   1        
 459   1        /*año*/
 460   1        *datos_clock=bcd_hex(lee_clk(RANO));      
 461   1         datos_clock++;
 462   1        /*mes*/
 463   1        *datos_clock=bcd_hex(lee_clk(RMES));      
 464   1         datos_clock++;
 465   1        /*Dia*/
 466   1        *datos_clock=bcd_hex(lee_clk(RDIA));      
 467   1         datos_clock++;
 468   1        /*hora*/  
 469   1        *datos_clock=bcd_hex(lee_clk(RHORA));     
 470   1         datos_clock++;
 471   1        /*minutos*/ 
 472   1        *datos_clock=bcd_hex(lee_clk(RMIN));      
 473   1         datos_clock++;
 474   1      
 475   1      }
 476          void hex_ascii(unsigned char * datos,unsigned char * fecha_asii)
 477          {
 478   1        unsigned char dato;
 479   1        //unsigned fecha_asii[7];
 480   1        
 481   1          dato=hex_bcd (*datos);
 482   1          *fecha_asii=((dato&0xf0)>>4)| 0x30;     /*dato parte alta*/
 483   1          *(fecha_asii+1)=(dato&0x0f)| 0x30;            /*dato parte bajo*/
 484   1          datos++;
 485   1        
 486   1          dato=hex_bcd (*(datos));
 487   1            *(fecha_asii+2)=((dato&0xf0)>>4)| 0x30;     /*dato parte alta*/
 488   1            *(fecha_asii+3)=(dato&0x0f)| 0x30;            /*dato parte bajo*/
C51 COMPILER V9.59.0.0   CLOCK                                                             11/04/2020 14:30:47 PAGE 9   

 489   1          datos++;
 490   1        
 491   1          dato=hex_bcd (*(datos));
 492   1            *(fecha_asii+4)=((dato&0xf0)>>4)| 0x30;     /*dato parte alta*/
 493   1            *(fecha_asii+5)=(dato&0x0f)| 0x30;            /*dato parte bajo*/
 494   1          
 495   1            *(fecha_asii+6)=0;
 496   1        
 497   1      }
 498          
 499          void Block_read_Clock_Rasberry(unsigned char *datos_clock)
 500          {
 501   1          
 502   1      unsigned char dato;
 503   1        /*mes*/
 504   1          dato=lee_clk(RMES);
 505   1          *datos_clock=((dato&0xf0)>>4)| 0x30;      /*dato parte alta*/
 506   1          datos_clock++;
 507   1          *datos_clock=(dato&0x0f)| 0x30;           /*dato parte bajo*/
 508   1          datos_clock++;    
 509   1      
 510   1          /*dia*/
 511   1          dato=lee_clk(RDIA);                       //;bcd_hex(lee_clk(DIA));
 512   1          *datos_clock=((dato&0xf0)>>4)| 0x30;      /*dato parte alta*/
 513   1          datos_clock++;
 514   1          *datos_clock=(dato&0x0f)| 0x30;           /*dato parte bajo*/
 515   1          datos_clock++;
 516   1          
 517   1          
 518   1          /*hora*/            
 519   1          dato=lee_clk(RHORA);
 520   1          *datos_clock=((dato&0xf0)>>4)| 0x30;      /*dato parte alta*/
 521   1          datos_clock++;
 522   1          *datos_clock=(dato&0x0f)| 0x30;           /*dato parte bajo*/
 523   1          datos_clock++;        
 524   1          
 525   1          /*minutos*/         
 526   1          dato=lee_clk(RMIN);
 527   1          *datos_clock=((dato&0xf0)>>4)| 0x30;      /*dato parte alta*/
 528   1          datos_clock++;
 529   1          *datos_clock=(dato&0x0f)| 0x30;           /*dato parte bajo*/
 530   1          datos_clock++;  
 531   1          
 532   1              /*año*/
 533   1          dato=lee_clk(RANO);
 534   1          *datos_clock=((dato&0xf0)>>4)| 0x30;      /*dato parte alta*/
 535   1          datos_clock++;
 536   1          *datos_clock=(dato&0x0f)| 0x30;           /*dato parte bajo*/
 537   1          datos_clock++;
 538   1          /*.*/
 539   1          *datos_clock= '.';
 540   1            datos_clock++;
 541   1            /*segundos*/          
 542   1          dato=lee_clk(RSEG);
 543   1          *datos_clock=((dato&0xf0)>>4)| 0x30;      /*dato parte alta*/
 544   1          datos_clock++;
 545   1          *datos_clock=(dato&0x0f)| 0x30;           /*dato parte bajo*/
 546   1          datos_clock++;  
 547   1          *datos_clock=0;
 548   1            
 549   1      }
 550          
C51 COMPILER V9.59.0.0   CLOCK                                                             11/04/2020 14:30:47 PAGE 10  

 551          /*------------------------------------------------------------------------------
 552           Lee el dato del reloj en bloque 
 553          ------------------------------------------------------------------------------*/
 554          void Block_read_Clock(unsigned char *datos_clock)
 555          {
 556   1        /*año*/ 
 557   1        *datos_clock=lee_clk(RANO);     
 558   1         datos_clock++;
 559   1        /*mes*/
 560   1        *datos_clock=lee_clk(RMES);     
 561   1         datos_clock++;
 562   1        /*Dia*/
 563   1        *datos_clock=lee_clk(RDIA);     
 564   1         datos_clock++;
 565   1        /*hora*/  
 566   1        *datos_clock=lee_clk(RHORA);      
 567   1         datos_clock++;
 568   1        /*minutos*/ 
 569   1        *datos_clock=lee_clk(RMIN);     
 570   1         datos_clock++;
 571   1        /*segundos*/  
 572   1        *datos_clock=lee_clk(RSEG);
 573   1        datos_clock++;
 574   1        *datos_clock=00;
 575   1          
 576   1      }
 577          void cond_ini_clock()
 578          {
 579   1        sck=0;          //Reloj
 580   1        rst=0;
 581   1        io=1;
 582   1      }
 583          
 584          /*------------------------------------------------------------------------------
 585          funcion q verifica la fecha maxima de salida 
 586          VERIFICA PAGO (sin_pago)....                                      
 587          SI PAGO, VERIFICA QUE LA FECHA MAX DE SALIDA NO EXCEDE A LA ACTUAL (acceso_ok)              
 588          (0) pago parqueadero y esta entre el tiempo permitido
 589          (1) no hay pago
 590          (2) excede tiempo de gracia
 591          ------------------------------------------------------------------------------*/
 592          char check_fechaOut(char *buffer)
 593          {
 594   1        char temp=1;
 595   1        unsigned char datos_clk[6];
 596   1        
 597   1      
 598   1        /*se valida la fecha de salida si es cero no ha pagado*/
 599   1      
 600   1        if ((*buffer==0x00)&&(*(buffer+1)==0x00)&&(*(buffer+2)==0x00)&&(*(buffer+3)==0x00)&&(*(buffer+4)==0x00))
 601   1          {
 602   2          
 603   2          temp=1;                                                         /*no hay pago*/
 604   2            
 605   2          }
 606   1        else
 607   1          {
 608   2            
 609   2            Block_read_Clock_Hex(datos_clk);                              /*leo el clock actual*/
 610   2        
 611   2          if (Debug_Tibbo==1)
 612   2          {
C51 COMPILER V9.59.0.0   CLOCK                                                             11/04/2020 14:30:47 PAGE 11  

 613   3             Debug_Fecha_actual(datos_clk);                               /*muestro la fecha y hora actual*/
 614   3            
 615   3          } 
 616   2            
 617   2          
 618   2          if (datos_clk[0]<*buffer)                                       /*comparo el año leido de board_pcb con el dato de salida 
             -leido en  la MF */
 619   2          {
 620   3            temp=0;                                                       /*el tiempo esta entre el tiempo de gracia y activa la salida*/
 621   3          }
 622   2          else if (datos_clk[0]==*buffer)                                 /*el año es igual*/
 623   2          {
 624   3            if (datos_clk[1]<*(buffer+1))                                 /*comparo el mes*/
 625   3            {
 626   4              temp=0;                                                     /*el tiempo esta entre el tiempo de gracia y activa la salida*/
 627   4            }
 628   3            else if (datos_clk[1]==*(buffer+1))                           /*el mes es igual*/
 629   3            {
 630   4              if (datos_clk[2]<*(buffer+2))                               /*se compara el dia*/
 631   4              {
 632   5                  temp=0;                                                 /*el tiempo esta entre el tiempo de gracia y activa la salida*/
 633   5              }
 634   4              else if(datos_clk[2]==*(buffer+2))                          /*el dia es igual*/
 635   4              {
 636   5                if (datos_clk[3]<*(buffer+3))                             /*comparo la hora del board_pcb con el dato de salida de 
             -la MF*/
 637   5                {
 638   6                      temp=0;                                             /*el tiempo esta entre el tiempo de gracia y activa la salida*/
 639   6                }
 640   5                else if (datos_clk[3]==*(buffer+3))                       /*es igual la hora*/
 641   5                {
 642   6                  if (datos_clk[4]<*(buffer+4))   //(minut<=minutOut)
 643   6                  {
 644   7                    temp=0;                                               /*el tiempo esta entre el tiempo de gracia y activa la salida*/
 645   7                  }
 646   6                  else 
 647   6                  {
 648   7                    temp=2;                                               /*Excede T.GRACIA*/
 649   7                  }
 650   6      
 651   6                }
 652   5                else
 653   5                {
 654   6                  temp=2;                                                 /*Excede T.GRACIA*/
 655   6                }
 656   5              }
 657   4              else
 658   4              {
 659   5                temp=2;                                                   /*Excede T.GRACIA*/
 660   5              } 
 661   4            }
 662   3            else
 663   3            {
 664   4              temp=2;                                                     /*Excede T.GRACIA*/
 665   4            }
 666   3          }
 667   2          else
 668   2          {
 669   3            temp=2;                                                       /*Excede T.GRACIA*/
 670   3       
 671   3          }
 672   2          
C51 COMPILER V9.59.0.0   CLOCK                                                             11/04/2020 14:30:47 PAGE 12  

 673   2        }
 674   1        return temp;
 675   1      }
 676          unsigned char check_fechaOut_2(unsigned char *buffer)
 677          {
 678   1        unsigned long int fecha_inicio,fecha_fin;
 679   1        unsigned char datos_clk[6];
 680   1        char temp;
 681   1        
 682   1        
 683   1          Block_read_Clock_Hex(datos_clk);                              /*leo el clock actual*/
 684   1          fecha_inicio =  datos_clk[0] * 365 + datos_clk[1] * 30 + datos_clk[2] ;
 685   1          fecha_fin = *(buffer ) * 365 + *(buffer + 1) * 30  + *(buffer + 2);
 686   1          
 687   1            
 688   1          if (fecha_fin >= fecha_inicio )           
 689   1          {
 690   2            temp = True;
 691   2          }
 692   1          else
 693   1          {
 694   2            temp = False;
 695   2          }
 696   1            
 697   1      
 698   1        
 699   1        return temp;
 700   1      }
 701          //*******************************************************************************************
 702          void analiza_tiempo(char *buffer,unsigned int Val_DctoMinutos)
 703          {
 704   1      
 705   1      
 706   1        int ano_inT;
 707   1        bit bisiesto=0;
 708   1      
 709   1        unsigned char ano_out, mes_out, dia_out, hora_out, min_out;
 710   1        unsigned char Horas_Dcto, Minutos_Dcto, Xtemp; 
 711   1      
 712   1        bit Tiempo_Dcto=0;
 713   1      
 714   1      if ((*(buffer+0x0b)==0x00)&&(*(buffer+0x0c)==0x00)&&(*(buffer+0x0d)==0x00)&&(*(buffer+0x0e)==0x00)&&(*(buf
             -fer+0x0f)==0x00))
 715   1      {
 716   2      
 717   2      //--------------------------------------------------------------------------------------------------------
             -------------------------------------
 718   2      //  Descuento Maximo 999 minutos  = 16 Horas  39 Minutos
 719   2      //--------------------------------------------------------------------------------------------------------
             -------------------------------------
 720   2        if (Val_DctoMinutos >= 60 )
 721   2        {
 722   3          Horas_Dcto=Val_DctoMinutos/60;
 723   3          Minutos_Dcto=Val_DctoMinutos-(Horas_Dcto*60);
 724   3      
 725   3        }
 726   2        else
 727   2        {
 728   3          Minutos_Dcto=Val_DctoMinutos;
 729   3          Horas_Dcto=0;
 730   3        }
 731   2      //********************************************************************************************************
C51 COMPILER V9.59.0.0   CLOCK                                                             11/04/2020 14:30:47 PAGE 13  

             -*************************************
 732   2      //  Aumenta Primero Minutos
 733   2      //--------------------------------------------------------------------------------------------------------
             --------------------------------------
 734   2        if (Minutos_Dcto!=0)
 735   2        {
 736   3          min_out=*(buffer+4)+Minutos_Dcto;         
 737   3          if (min_out>59)                   // Si los minutos no sube de 60 no hay que aumentar nada
 738   3          {
 739   4      //----------------------------------------------------
 740   4            Xtemp=(int)(min_out/60);          // Numero de Horas a aumentar
 741   4            min_out=min_out-(Xtemp*60);         // Total de minutos
 742   4      //----------------------------------------------------
 743   4            hora_out=*(buffer+3)+Xtemp;         /*horas*/
 744   4            if (hora_out>23)
 745   4            {
 746   5              Xtemp= hora_out/24;             // Numero Dias a aumentar
 747   5              hora_out=hora_out-(Xtemp*24);       // Total de Horas
 748   5      //--------------------------------------------------------------------------------------------------------
             ---------------------------------------
 749   5              dia_out=*(buffer+2)+Xtemp;
 750   5              if ((*(buffer+1)==1)||(*(buffer+1)==3)||(*(buffer+1)==5)||(*(buffer+1)==7)||(*(buffer+1)==8)||(*(buffe
             -r+1)==10)||(*(buffer+1)==12))   // Meses de 31 dias
 751   5              {
 752   6                if (dia_out>31)
 753   6                {
 754   7                  dia_out=dia_out-31;
 755   7                  mes_out=*(buffer+1)+1;
 756   7                  if (mes_out>12)
 757   7                  {
 758   8                    ano_out=*(buffer+0)+1;
 759   8                    mes_out=1;
 760   8                  }
 761   7                  else
 762   7                  {
 763   8                    ano_out=*(buffer+0);
 764   8                  }
 765   7                }
 766   6                else
 767   6                {
 768   7                  mes_out=*(buffer+1);                        /*mes*/
 769   7                  ano_out=*(buffer+0);                        /*año*/
 770   7                } 
 771   6              }
 772   5              else if ((*(buffer+1)==4)||(*(buffer+1)==6)||(*(buffer+1)==9)||(*(buffer+1)==11))                   // Meses de
             - 30 dias
 773   5              {
 774   6                if (dia_out>30)
 775   6                {
 776   7                  dia_out=dia_out-30;
 777   7                  mes_out=*(buffer+1)+1;
 778   7                  ano_out=*(buffer+0);          
 779   7                }
 780   6                else
 781   6                {
 782   7                  mes_out=*(buffer+1);
 783   7                  ano_out=*(buffer+0);  
 784   7                }
 785   6      
 786   6              }
 787   5              else if (*(buffer+1)==2)                                        // Febtrero Es biciesto?
 788   5              {
C51 COMPILER V9.59.0.0   CLOCK                                                             11/04/2020 14:30:47 PAGE 14  

 789   6      //--------------------------------------------------------------------------------------------------------
             ---------------------------------------
 790   6                ano_inT=*(buffer+0)+2000;
 791   6                bisiesto=0;
 792   6      
 793   6      /*
 794   6                float flotante=12.345;
 795   6                int entero;
 796   6      
 797   6                entero=(int)flotante;
 798   6      */
 799   6        
 800   6      /*          division=(ano_inT/4);
 801   6                intpart=division;
 802   6                decpart= ano_inT - (intpart*4);
 803   6                if (decpart==0)
 804   6                {
 805   6                  division=(ano_inT/10);
 806   6                    intpart = division;
 807   6                    decpart = ano_inT - (intpart*10);
 808   6                  if (decpart==0)
 809   6                  {
 810   6                    division=(ano_inT/40);
 811   6                      intpart = division;
 812   6                      decpart = ano_inT - (intpart*40);
 813   6      
 814   6      
 815   6                    if (decpart==0)
 816   6                    {
 817   6                      bisiesto=1;
 818   6                    }
 819   6                    else
 820   6                    {
 821   6                      bisiesto=0;
 822   6                    }
 823   6                  }
 824   6                  else
 825   6                  {
 826   6                    bisiesto=1;
 827   6                  }
 828   6                }
 829   6      */
 830   6      
 831   6                if ((*(buffer+0)==16)||(*(buffer+0)==20)||(*(buffer+0)==24)||(*(buffer+0)==28)||(*(buffer+0)==32)||(*
             -(buffer+0)==36))
 832   6                {
 833   7                  bisiesto=1;
 834   7                }   
 835   6      //--------------------------------------------------------------------------------------------------------
             ---------------------------------------          
 836   6                if (bisiesto==1)
 837   6                {
 838   7                  if (dia_out>29)
 839   7                  {
 840   8                    ano_out=*(buffer+0);
 841   8                    dia_out=dia_out-29;
 842   8                    mes_out=*(buffer+1)+1;
 843   8                
 844   8                  }
 845   7                  else
 846   7                  {
 847   8                    ano_out=*(buffer+0);  
C51 COMPILER V9.59.0.0   CLOCK                                                             11/04/2020 14:30:47 PAGE 15  

 848   8                    dia_out=dia_out;
 849   8                    mes_out=*(buffer+1);
 850   8                  }
 851   7                }
 852   6                else
 853   6                {
 854   7                  if (dia_out>28)
 855   7                  {
 856   8                    dia_out=dia_out-28;
 857   8                    mes_out=*(buffer+1)+1;
 858   8                    ano_out=*(buffer+0);
 859   8                  }
 860   7                  else
 861   7                  {
 862   8                    dia_out=dia_out;
 863   8                    mes_out=*(buffer+1);
 864   8                    ano_out=*(buffer+0);  
 865   8                  }
 866   7                }
 867   6      //--------------------------------------------------------------------------------------------------------
             --------------------------------------
 868   6              }
 869   5              else                                                // Error fecha
 870   5              {
 871   6                dia_out=dia_out;
 872   6                mes_out=*(buffer+1);
 873   6                ano_out=*(buffer+0);  
 874   6              }
 875   5            }
 876   4            else
 877   4            {
 878   5              dia_out=*(buffer+2);
 879   5              mes_out=*(buffer+1);
 880   5              ano_out=*(buffer+0);
 881   5            }
 882   4          }
 883   3          else
 884   3          {
 885   4            hora_out=*(buffer+3);
 886   4            dia_out=*(buffer+2);
 887   4            mes_out=*(buffer+1);
 888   4            ano_out=*(buffer+0);
 889   4          }
 890   3        }
 891   2        else
 892   2        {
 893   3          min_out=*(buffer+4);
 894   3          hora_out=*(buffer+3);
 895   3          dia_out=*(buffer+2);
 896   3          mes_out=*(buffer+1);
 897   3          ano_out=*(buffer+0);
 898   3        }
 899   2      //********************************************************************************************************
             -*************************************
 900   2      //  AUMENTA HORAS
 901   2      //--------------------------------------------------------------------------------------------------------
             --------------------------------------
 902   2          if (Horas_Dcto!=0)
 903   2          {
 904   3              hora_out=hora_out+Horas_Dcto;
 905   3              if (hora_out>23)
 906   3              {
C51 COMPILER V9.59.0.0   CLOCK                                                             11/04/2020 14:30:47 PAGE 16  

 907   4                Xtemp= hora_out/24;             // Numero Dias a aumentar
 908   4                hora_out=hora_out-(Xtemp*24);       // Total de Horas
 909   4        //-------------------------------------------------------------------------------------------------------
             ----------------------------------------
 910   4                dia_out=dia_out+Xtemp;
 911   4                if ((mes_out==1)||(mes_out==3)||(mes_out==5)||(mes_out==7)||(mes_out==8)||(mes_out==10)||(mes_out==12
             -))    // Meses de 31 dias
 912   4                {
 913   5                  if (dia_out>31)
 914   5                  {
 915   6                    dia_out=dia_out-31;
 916   6                    mes_out=mes_out+1;
 917   6                    if (mes_out>12)
 918   6                    {
 919   7                      ano_out=ano_out+1;
 920   7                      mes_out=1;
 921   7                    }
 922   6                    else
 923   6                    {
 924   7                      ano_out=ano_out;
 925   7                    }
 926   6                  }
 927   5                }
 928   4                else if ((mes_out==4)||(mes_out==6)||(mes_out==9)||(mes_out==11))                   // Meses de 30 dias
 929   4                {
 930   5                  if (dia_out>30)
 931   5                  {
 932   6                    dia_out=dia_out-30;
 933   6                    mes_out=mes_out+1;
 934   6                    ano_out=ano_out;          
 935   6                  }
 936   5                  else
 937   5                  {
 938   6                    mes_out=mes_out;
 939   6                    ano_out=ano_out;  
 940   6                  }
 941   5                }
 942   4                else if (mes_out==2)                                        // Febtrero Es biciesto?
 943   4                {
 944   5      //--------------------------------------------------------------------------------------------------------
             ---------------------------------------
 945   5                  ano_inT=ano_out+2000;
 946   5                  bisiesto=0;
 947   5      
 948   5      
 949   5      /*            division=(ano_inT/4);
 950   5                  intpart = division;
 951   5                  decpart= ano_inT - (intpart*4);
 952   5        
 953   5        
 954   5                  if (decpart==0)
 955   5                  {
 956   5                    division=(ano_inT/10);
 957   5                      intpart = division;
 958   5                      decpart = ano_inT - (intpart*10);
 959   5                    if (decpart==0)
 960   5                    {
 961   5                      division=(ano_inT/40);
 962   5                        intpart = division;
 963   5                        decpart = ano_inT - (intpart*40);
 964   5                      if (decpart==0)
 965   5                      {
C51 COMPILER V9.59.0.0   CLOCK                                                             11/04/2020 14:30:47 PAGE 17  

 966   5                        bisiesto=1;
 967   5                      }
 968   5                      else
 969   5                      {
 970   5                        bisiesto=0;
 971   5                      }
 972   5                    }
 973   5                    else
 974   5                    {
 975   5                      bisiesto=1;
 976   5                    }
 977   5                  }
 978   5      */
 979   5                  if ((ano_out==16)||(ano_out==20)||(ano_out==24)||(ano_out==28)||(ano_out==32)||(ano_out==36))
 980   5                  {
 981   6                    bisiesto=1;
 982   6                  }   
 983   5      
 984   5      //--------------------------------------------------------------------------------------------------------
             ---------------------------------------          
 985   5                  if (bisiesto==1)
 986   5                  {
 987   6                    if (dia_out>29)
 988   6                    {
 989   7                      dia_out=dia_out-29;
 990   7                      mes_out=mes_out+1;
 991   7                      ano_out=ano_out;            
 992   7                    }
 993   6                    else
 994   6                    {
 995   7                      dia_out=dia_out;
 996   7                      mes_out=mes_out;
 997   7                      ano_out=ano_out;
 998   7                    }
 999   6                  }
1000   5                  else
1001   5                  {
1002   6                    if (dia_out>28)
1003   6                    {
1004   7                      dia_out=dia_out-28;
1005   7                      mes_out=mes_out+1;
1006   7                      ano_out=ano_out;                          
1007   7                    }
1008   6                  }
1009   5        //-------------------------------------------------------------------------------------------------------
             ----------------------------------------
1010   5                }
1011   4        
1012   4              }
1013   3          }
1014   2      
1015   2      //--------------------------------------------------------------------------------------------------------
             ---------------------------------------
1016   2        *(buffer+0x0b)=ano_out;
1017   2        *(buffer+0x0c)=mes_out;
1018   2        *(buffer+0x0d)=dia_out;
1019   2        *(buffer+0x0e)=hora_out;
1020   2        *(buffer+0x0f)=min_out;   
1021   2      //--------------------------------------------------------------------------------------------------------
             ---------------------------------------
1022   2        }
1023   1        
C51 COMPILER V9.59.0.0   CLOCK                                                             11/04/2020 14:30:47 PAGE 18  

1024   1      
1025   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4889    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1      85
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
