C51 COMPILER V9.59.0.0   PTO_PARALELO                                                      07/27/2021 14:31:10 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE PTO_PARALELO
OBJECT MODULE PLACED IN .\Objects\pto_paralelo.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE pto_paralelo.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.
                    -\Listings\pto_paralelo.lst) TABS(2) OBJECT(.\Objects\pto_paralelo.obj)

line level    source

   1          #include <pto_paralelo.h>
   2          #include <reg51.h>
   3          
   4          extern void Delay (void);
   5          extern void Delay_20us(unsigned int cnt);
   6          extern void off_Timer0_Interrup(void);
   7          extern void on_Timer0_Interrup(void);
   8          extern void          _nop_     (void);
   9          extern void Block_read_Clock(unsigned char *datos_clock);
  10          extern char lee_clk (unsigned char dir_clk);
  11          extern int sprintf  (char *, const char *, ...);
  12          extern void DebugBufferMF(unsigned char *str,unsigned char num_char,char io);
  13          extern void Debug_Dividir_texto();
  14          extern void Debug_txt_Tibbo(unsigned char * str);
  15          extern void Block_read_Clock_Hex(unsigned char *datos_clock);
  16          
  17          /*pines del pto paralelo*/
  18          sbit port_clk = P3^4;       //Recepcion AUX                     *
  19          sbit busy = P3^3;           /*bussy de Entrada Interrupcion del Procesador principal      */
  20          sbit ready = P3^2;          //Salida. solicitud envio Datos             *
  21          sbit rx_in_data = P0^6;       //Indicador de Rx Transporte o Lectura Wiegand      *
  22          sbit led_err_imp = P0^2;      //Error   
  23          
  24          #define MAX_DAT_BUFF    40
  25          #define TIME_WBUS       20000
  26          #define STX             02 
  27          #define ETX             03 
  28          
  29          /*definicion de variable globales*/
  30          extern int ID_CLIENTE;            
  31          extern int COD_PARK;
  32          
  33          /*------------------------------------------------------------------------------
  34          
  35          Recibe informacion del Mc principla por pto paralelo
  36          retorna:
  37          num_data= numero de caracteres recibidos
  38          buffer_port= apuntador donde se almacena el dato recibido
  39          busy=0    significa que el principla me transmite una cadena de datos
  40          Ready=0   significa que estoy listo para recibir los datos
  41          time_out= es el tiempo de espera que le damos al ciclo de reloj en alto si se pasa el tiempo se sale por f
             -in de la transmicion 
  42          num_data= es numero de datos recibidos 
  43          rx_in_data= 0 prende el led que estoy recibiendo un dato (1) termina la recepcion del dato
  44          
  45          ------------------------------------------------------------------------------*/
  46          unsigned char recibe_port(unsigned char *buffer_port)
  47          {
  48   1      
  49   1        unsigned int count;
  50   1        unsigned char time_out,num_data;
  51   1        unsigned int T_ANCHO=160;
  52   1        unsigned char data_temp=0;
  53   1      
C51 COMPILER V9.59.0.0   PTO_PARALELO                                                      07/27/2021 14:31:10 PAGE 2   

  54   1        
  55   1        if (busy==0)
  56   1        {
  57   2          
  58   2          off_Timer0_Interrup();
  59   2          num_data=0;
  60   2          rx_in_data=0;
  61   2          time_out=0;
  62   2          ready=0;
  63   2        
  64   2      //-----------------------------------------------------------------
  65   2          count=T_ANCHO;
  66   2          while ((busy==0)&&(time_out==0))
  67   2          {
  68   3            if(port_clk==1)
  69   3            {
  70   4              
  71   4              count--;
  72   4              if (count==0)
  73   4              {
  74   5                time_out=1;
  75   5                break;
  76   5              }
  77   4            }
  78   3            else 
  79   3            {
  80   4              if (num_data<MAX_DAT_BUFF)
  81   4              {
  82   5                
  83   5                while(port_clk==0)
  84   5                {
  85   6                  
  86   6                  data_temp=P2 & 0xff;
  87   6                
  88   6                }
  89   5                  *buffer_port=data_temp;
  90   5                  buffer_port++;
  91   5                  num_data++; 
  92   5                  count=T_ANCHO;
  93   5              }
  94   4              else{break;
  95   5                  }
  96   4            }
  97   3           }
  98   2      
  99   2        while(busy==0);
 100   2          ready=1;
 101   2          rx_in_data=1;
 102   2        }
 103   1        on_Timer0_Interrup();
 104   1           
 105   1        return num_data;
 106   1      }
 107          
 108          /*-------------------------------------------------------------------------------------------
 109          
 110          Rutina de envio de datos pto paralelo
 111          
 112          -------------------------------------------------------------------------------------------*/
 113          void  send_port(unsigned char *buffer_port, unsigned char length_char)
 114          {
 115   1       
C51 COMPILER V9.59.0.0   PTO_PARALELO                                                      07/27/2021 14:31:10 PAGE 3   

 116   1        long int cont;
 117   1        unsigned char timeOut,length;
 118   1        
 119   1        length=length_char;
 120   1      
 121   1        ready=1;                                        // Genera interrupcion al Principal
 122   1        port_clk=1;                                     // El que transmite debe fijar primero el Clk en 1
 123   1        rx_in_data=0;                                   // Led de visualizacion   ON
 124   1        timeOut=0;                                      // Tiempo de Espera
 125   1        ready=0;                                        // Genera interrupcion al Principal
 126   1        cont=TIME_WBUS;
 127   1      
 128   1        while ((busy==1)&&(timeOut==0))                 //Espera reconocimiento INT por entrada busy
 129   1        {
 130   2          ready=0;
 131   2          port_clk=1;
 132   2          cont--;
 133   2          if (cont==0)
 134   2          {
 135   3            timeOut=1;
 136   3            led_err_imp=0;                              // LED ERROR
 137   3          }
 138   2        }
 139   1        if ((timeOut==0)&&(busy==0))
 140   1        {
 141   2            
 142   2          
 143   2          do 
 144   2          {
 145   3            
 146   3                P2=*buffer_port;
 147   3                Pulso_Bus();
 148   3                buffer_port++;
 149   3            
 150   3                length_char--;
 151   3          }while (length_char);
 152   2            
 153   2          }
 154   1        P2=0XFF;
 155   1        ready=1;
 156   1        port_clk=1;
 157   1        rx_in_data=1;                                   //Led de visualizacion  OFF
 158   1        Delay_20us(98);
 159   1            
 160   1          
 161   1      }
 162          /*-------------------------------------------------------------------------------------------
 163          Funcion q arma la trama a transmitir pto paralelo trama g
 164          -------------------------------------------------------------------------------------------*/ 
 165          /*
 166          void Trama_pto_Paralelo(unsigned char *buffer_S1_B0,unsigned char *buffer_S1_B2,unsigned char cmd)
 167          {
 168            unsigned char Buffer_port[30];
 169            unsigned char j=3;
 170            Buffer_port[0]=STX;                               /*inicio de cmd STx*/
 171          /*  Buffer_port[1]=cmd;                               /*cmd*/
 172          /*  Buffer_port[2]=21;                                /*numero de digitos de transmicion NO IMPORTA NO ES VALIDADO EN PRINC
             -IPAL*/
 173          /*  do
 174            {
 175             Buffer_port[j++]=*buffer_S1_B0;                  /*ticket*/
 176          //    buffer_S1_B0++;
C51 COMPILER V9.59.0.0   PTO_PARALELO                                                      07/27/2021 14:31:10 PAGE 4   

 177            //}while (*buffer_S1_B0!=0);
 178            
 179            //if(*(buffer_S1_B2+5)!=0)                          /*MF_DCTO           0x05        Tipo de descuento (00)sin descuento, (01xx 
             -xxxx) 0x40 fija fecha de salida,
 180          //                                                    10xx xxxx dcto por porcentaje xx xxxx= valor del porcentaje, 11xx xxxx dcto po
             -r dinero */
 181            //{
 182              //Buffer_port[j++]='-';                           /*separador del descuento*/
 183            //  Buffer_port[j++]=*(buffer_S1_B2+5)+0x30;        /*descuento pasado a ascii*/
 184          //  }
 185            //else
 186            //{
 187              //Buffer_port[j++]='-';                           /*separador del descuento*/
 188              //Buffer_port[j++]='0';
 189            //}
 190            //if(*(buffer_S1_B2+9)==0)                          /*MF_IN_PAGO        0x09  */  
 191            //{
 192              //Buffer_port[j++]='-';                           /*separador de la fecha de entrada*/
 193              //Buffer_port[j++]=*(buffer_S1_B2+0)+0x030;       /*año de entrada*/
 194              //Buffer_port[j++]=*(buffer_S1_B2+1)+0x030;       /*mes de entrada*/
 195              //Buffer_port[j++]=*(buffer_S1_B2+2)+0x030;       /*dia de entrada*/
 196              //Buffer_port[j++]=*(buffer_S1_B2+3)+0x030;       /*hora de entrada*/
 197              //Buffer_port[j++]=*(buffer_S1_B2+4)+0x030;       /*minutos de entrada*/
 198            //}
 199              //Buffer_port[j++]='.';                           /*separador tipo de vehiculo*/
 200                                                              /*MF_TIPO_VEHICULO  0x08              tipo vehiculo 00 carro, 01 moto, 02 bicicleta, 04 
             -tractomula*/
 201              
 202              //if(*(buffer_S1_B2+8)!=0)
 203              //{
 204                //Buffer_port[j++]='M';                         /*moto*/
 205              //}
 206              //else
 207              //{
 208              //  Buffer_port[j++]='C';                         /*carro*/
 209            //  }
 210              //Buffer_port[j++]=ETX; 
 211              //Buffer_port[2]=j;
 212              
 213              //ready=0;
 214                //while(busy==0);
 215              //send_port(Buffer_port,j);                         /*trama transmitida pto paralelo*/
 216              
 217                //Debug_Dividir_texto();                                              /*division del texto */
 218                        
 219            //    DebugBufferMF(Buffer_port,j,1);   
 220              //  Debug_Dividir_texto();  
 221          //}
 222          
 223          /*-------------------------------------------------------------------------------------------
 224          Funcion q arma la trama a transmitir pto paralelo trama P
 225          -------------------------------------------------------------------------------------------*/ 
 226          void Trama_pto_Paralelo_P(unsigned char *buffer_S1_B0,unsigned char *buffer_S1_B2,unsigned char cmd)
 227          {
 228   1        
 229   1      static unsigned char Buffer_port[30];
 230   1        unsigned char j=3;
 231   1        Buffer_port[0]=STX;                               /*inicio de cmd STx*/
 232   1        Buffer_port[1]=cmd;                               /*cmd*/
 233   1        Buffer_port[2]=21;                                /*numero de digitos de transmicion NO IMPORTA NO ES VALIDADO EN PRINCIP
             -AL*/
 234   1        do
C51 COMPILER V9.59.0.0   PTO_PARALELO                                                      07/27/2021 14:31:10 PAGE 5   

 235   1        { 
 236   2         Buffer_port[j++]=*buffer_S1_B0;                  /*ticket*/
 237   2          buffer_S1_B0++;
 238   2        }while (*buffer_S1_B0!=0);
 239   1        Buffer_port[2]=j-3;
 240   1        if(*(buffer_S1_B2+5)!=0)                          /*MF_DCTO           0x05        Tipo de descuento (00)sin descuento, (01xx xx
             -xx) 0x40 fija fecha de salida,
 241   1                                                          10xx xxxx dcto por porcentaje xx xxxx= valor del porcentaje, 11xx xxxx dcto por 
             -dinero */
 242   1        {
 243   2          Buffer_port[j++]='-';                           /*separador del descuento*/
 244   2          Buffer_port[j++]=*(buffer_S1_B2+5)+0x30;        /*descuento pasado a ascii*/
 245   2        }
 246   1        
 247   1        /*
 248   1        if(*(buffer_S1_B2+9)&0x0f==0x0f)                  /*MF_IN_PAGO        0x09  */  
 249   1        //{
 250   1        //  Buffer_port[j++]='-';                           /*separador de la fecha de entrada*/
 251   1        //  Buffer_port[j++]=*(buffer_S1_B2+0)+0x030;       /*año de entrada*/
 252   1        //  Buffer_port[j++]=*(buffer_S1_B2+1)+0x030;       /*mes de entrada*/
 253   1        //  Buffer_port[j++]=*(buffer_S1_B2+2)+0x030;       /*dia de entrada*/
 254   1        //  Buffer_port[j++]=*(buffer_S1_B2+3)+0x030;       /*hora de entrada*/
 255   1        //  Buffer_port[j++]=*(buffer_S1_B2+4)+0x030;       /*minutos de entrada*/
 256   1        //}
 257   1        
 258   1          Buffer_port[j++]='.';                           /*separador tipo de vehiculo*/
 259   1                                                          /*MF_TIPO_VEHICULO  0x08              tipo vehiculo 00 carro, 01 moto, 02 bicicleta, 04 
             -tractomula*/
 260   1          
 261   1          if(*(buffer_S1_B2+8)!=0)
 262   1          {
 263   2            Buffer_port[j++]='M';                         /*moto*/
 264   2          }
 265   1          else
 266   1          {
 267   2            Buffer_port[j++]='C';                         /*carro*/
 268   2          }
 269   1          //Buffer_port[j++]=ETX; 
 270   1          
 271   1          ready=0;
 272   1            //while(busy==0);
 273   1          send_port(Buffer_port,j);                         /*trama transmitida pto paralelo*/
 274   1            Debug_Dividir_texto();                                              /*division del texto */
 275   1                    
 276   1            DebugBufferMF(Buffer_port,j,1);   
 277   1            Debug_Dividir_texto();  
 278   1          
 279   1            
 280   1      }
 281          
 282          /*-------------------------------------------------------------------------------------------
 283          Funcion q arma la trama a transmitir pto paralelo trama 
 284          C = cajero
 285          s =
 286          -------------------------------------------------------------------------------------------*/ 
 287          //void Trama_pto_Paralelo_C_s(unsigned char *buffer_S1_B0,unsigned char *buffer_S1_B2)
 288          //{
 289          //  unsigned char Buffer_port[30];
 290          //  unsigned char j=2;
 291          //  Buffer_port[0]=STX;                               /*inicio de cmd STx*/
 292            //Buffer_port[1]=cmd;                               /*cmd*/
 293            
C51 COMPILER V9.59.0.0   PTO_PARALELO                                                      07/27/2021 14:31:10 PAGE 6   

 294          //  do
 295            //{
 296            // Buffer_port[j++]=*buffer_S1_B0;                  /*ticket*/
 297            //  buffer_S1_B0++;
 298            //}while (*buffer_S1_B0!=0);
 299            
 300            
 301                  
 302            
 303            
 304            //if(*(buffer_S1_B2+5)!=0)                          /*MF_DCTO           0x05        Tipo de descuento (00)sin descuento, (01xx 
             -xxxx) 0x40 fija fecha de salida,
 305          //                                                    10xx xxxx dcto por porcentaje xx xxxx= valor del porcentaje, 11xx xxxx dcto po
             -r dinero */
 306            //{
 307              //Buffer_port[j++]='-';                           /*separador del descuento*/
 308              //Buffer_port[j++]=*(buffer_S1_B2+5)+0x30;        /*descuento pasado a ascii*/
 309            //}
 310            //else
 311            //{
 312            //  Buffer_port[j++]='-';                           /*separador del descuento*/
 313            //  Buffer_port[j++]='0';
 314            //}
 315            //if((*(buffer_S1_B2+9)&0x0f)==0x0f)                  /*MF_IN_PAGO=0x09       si es =0x0f fue liquidado en cajero   */
             -  
 316            //{
 317              //Buffer_port[1]='C';
 318            //}
 319            //else
 320            //{
 321            //  Buffer_port[1]='s';
 322            //}
 323            //  Buffer_port[j++]='-';                           /*separador de la fecha de entrada*/
 324            //  Buffer_port[j++]=*(buffer_S1_B2+0)+0x030;       /*año de entrada*/
 325            //  Buffer_port[j++]=*(buffer_S1_B2+1)+0x030;       /*mes de entrada*/
 326            //  Buffer_port[j++]=*(buffer_S1_B2+2)+0x030;       /*dia de entrada*/
 327            //  Buffer_port[j++]=*(buffer_S1_B2+3)+0x030;       /*hora de entrada*/
 328            //  Buffer_port[j++]=*(buffer_S1_B2+4)+0x030;       /*minutos de entrada*/
 329            
 330          //    Buffer_port[j++]='.';                           /*separador tipo de vehiculo*/
 331                                                              /*MF_TIPO_VEHICULO  0x08              tipo vehiculo 00 carro, 01 moto, 02 bicicleta, 04 
             -tractomula*/
 332              
 333            //  if(*(buffer_S1_B2+8)!=0)
 334              //{
 335                //Buffer_port[j++]='M';                         /*moto*/
 336              //}
 337              //else
 338              //{
 339              //  Buffer_port[j++]='C';                         /*carro*/
 340              //}
 341              //Buffer_port[j++]=ETX; 
 342              //while(busy==0);
 343              //send_port(Buffer_port,j);                         /*trama transmitida pto paralelo*/
 344              
 345            
 346          //}
 347          
 348          /*-------------------------------------------------------------------------------------------
 349          Funcion q arma la trama a transmitir pto paralelo trama g
 350          -------------------------------------------------------------------------------------------*/ 
 351          void Trama_pto_Paralelo_new(unsigned char *buffer_S1_B0,unsigned char *buffer_S1_B2,unsigned char cmd)
C51 COMPILER V9.59.0.0   PTO_PARALELO                                                      07/27/2021 14:31:10 PAGE 7   

 352          {
 353   1        unsigned char Buffer_port[30];
 354   1        unsigned char j=2;
 355   1        
 356   1        Buffer_port[0]=STX;                               /*inicio de cmd STx*/
 357   1        Buffer_port[1]=cmd;                               /*cmd*/
 358   1      
 359   1        do
 360   1        {
 361   2         Buffer_port[j++]=*buffer_S1_B0;                  /*ticket*/
 362   2          buffer_S1_B0++;
 363   2        }while (*buffer_S1_B0!=0);
 364   1        
 365   1        if(*(buffer_S1_B2+6)!=0)                          /*MF_DCTO           0x05        Tipo de descuento (00)sin descuento, (01xx xx
             -xx) 0x40 fija fecha de salida,
 366   1                                                          10xx xxxx dcto por porcentaje xx xxxx= valor del porcentaje, 11xx xxxx dcto por 
             -dinero */
 367   1        {
 368   2          Buffer_port[j++]='-';                           /*separador del descuento*/
 369   2          Buffer_port[j++]=*(buffer_S1_B2+6)+0x30;        /*descuento pasado a ascii*/
 370   2        }
 371   1        else
 372   1        {
 373   2          Buffer_port[j++]='-';                           /*separador del descuento*/
 374   2          Buffer_port[j++]='0';
 375   2        }
 376   1        
 377   1        if((*(buffer_S1_B2+9)&0x0f)==0x0f)                  /*MF_IN_PAGO=0x09       si es =0x0f fue liquidado en cajero   */  
 378   1        {
 379   2          Buffer_port[1]='C';
 380   2        }
 381   1        else
 382   1        {
 383   2          Buffer_port[1]='s';
 384   2        }
 385   1        
 386   1          Buffer_port[j++]='-';                           /*separador de la fecha de entrada*/
 387   1          Buffer_port[j++]=*(buffer_S1_B2+0)+0x030;       /*año de entrada*/
 388   1          Buffer_port[j++]=*(buffer_S1_B2+1)+0x030;       /*mes de entrada*/
 389   1          Buffer_port[j++]=*(buffer_S1_B2+2)+0x030;       /*dia de entrada*/
 390   1          Buffer_port[j++]=*(buffer_S1_B2+3)+0x030;       /*hora de entrada*/
 391   1          Buffer_port[j++]=*(buffer_S1_B2+4)+0x030;       /*minutos de entrada*/
 392   1          Buffer_port[j++]='-'; 
 393   1          
 394   1          Block_read_Clock_Hex(Buffer_port+j);
 395   1          
 396   1          Buffer_port[j++]=Buffer_port[j]+ 0x30;
 397   1          Buffer_port[j++]=Buffer_port[j]+ 0x30;
 398   1          Buffer_port[j++]=Buffer_port[j]+ 0x30;
 399   1          Buffer_port[j++]=Buffer_port[j]+ 0x30;
 400   1          Buffer_port[j++]=Buffer_port[j]+ 0x30;
 401   1          
 402   1          
 403   1        
 404   1          Buffer_port[j++]='.';                           /*separador tipo de vehiculo*/
 405   1                                                          /*MF_TIPO_VEHICULO  0x08              tipo vehiculo 00 carro, 01 moto, 02 bicicleta, 04 
             -tractomula*/
 406   1          
 407   1          if(*(buffer_S1_B2+8)!=0)
 408   1          {
 409   2            Buffer_port[j++]='M';                         /*moto*/
 410   2          }
C51 COMPILER V9.59.0.0   PTO_PARALELO                                                      07/27/2021 14:31:10 PAGE 8   

 411   1          else
 412   1          {
 413   2            Buffer_port[j++]='C';                         /*carro*/
 414   2          }
 415   1          Buffer_port[j++]=ETX; 
 416   1        
 417   1          
 418   1          ready=0;
 419   1            while(busy==0);
 420   1          send_port(Buffer_port,j);                         /*trama transmitida pto paralelo*/
 421   1          
 422   1            Debug_Dividir_texto();                                              /*division del texto */
 423   1            Debug_txt_Tibbo((unsigned char *) "Datos enviados pto paral=");       
 424   1            DebugBufferMF(Buffer_port,j,0);   
 425   1            Debug_Dividir_texto();  
 426   1      }
 427          
 428          
 429          
 430          /*-------------------------------------------------------------------------------------------
 431          Reloj del pto paralelo
 432          -------------------------------------------------------------------------------------------*/
 433          void Pulso_Bus(void)
 434          {
 435   1        port_clk=0;
 436   1        Delay_20us(33);
 437   1        port_clk=1;
 438   1        Delay_20us(33);                 /*wait_ancho*/
 439   1      }
 440          /*-------------------------------------------------------------------------------------------
 441          Envia msj de error visualizar en el lcd del micro principal
 442          -------------------------------------------------------------------------------------------*/
 443          void send_portERR(unsigned char cod_err)
 444          {
 445   1        unsigned char timeOut;
 446   1        long int cont;
 447   1        
 448   1        port_clk=1;                                   /*Reloj del pto paralelo El que transmite debe fijar primero el Clk en 1*/
 449   1        rx_in_data=0;                                 //Led de visualizacion  ON
 450   1        timeOut=0;
 451   1        cont=15000;
 452   1        
 453   1        P2=cod_err;
 454   1        ready=0;                                      //Genera interrupcion al Principal
 455   1        while ((busy==1)&&(timeOut==0))               //Espera reconocimiento INT por entrada busy
 456   1        {
 457   2          cont--;
 458   2          if (cont==0)
 459   2          {
 460   3            timeOut=1;
 461   3          }
 462   2        }
 463   1        if ((timeOut==0)&&(busy==0))
 464   1        {
 465   2              P2=cod_err;
 466   2            Pulso_Bus();
 467   2        }
 468   1        ready=1;
 469   1        port_clk=1;
 470   1        rx_in_data=1;                                   //Led de visualizacion  OFF
 471   1      
 472   1        P2=0XFF;
C51 COMPILER V9.59.0.0   PTO_PARALELO                                                      07/27/2021 14:31:10 PAGE 9   

 473   1      
 474   1        Delay_20us(98); 
 475   1        Delay_20us(98); 
 476   1        
 477   1      }
 478          /*-------------------------------------------------------------------------------------------
 479          Condiciones de Inicio del pto paralelo
 480          -------------------------------------------------------------------------------------------*/
 481          void cond_ini_pto()
 482          { 
 483   1        
 484   1        port_clk=1;
 485   1        ready=1;
 486   1        rx_in_data=1;
 487   1        P2=0xff;
 488   1      }
 489          /*------------------------------------------------------------------------------
 490          Funcion q carga el reloj y lo envia por el pto paralelo
 491          msj informativo con el pulsador funcion 
 492          ------------------------------------------------------------------------------*/
 493          void load_and_send_info_reloj()
 494          {
 495   1        unsigned char buffer_info[11];
 496   1        
 497   1          buffer_info[0]=STX;                   /*STX*/
 498   1          
 499   1          buffer_info[1]='i';                   /*se envia el cmd*/
 500   1          
 501   1          Block_read_Clock(buffer_info+2);      /*año, mes,dia, hora, minutos, segundos*/
 502   1          buffer_info[8]=lee_clk(0x8b);         //Dia semana
 503   1          buffer_info[9]=ETX;                   //ETX
 504   1      
 505   1         
 506   1      
 507   1          send_port(buffer_info,10);
 508   1      }
 509          
 510          /*------------------------------------------------------------------------------
 511          procedimiento que transmite por el pto paralelo ID_cliente,COD_park
 512          con el pulsador funcion
 513          ------------------------------------------------------------------------------*/ 
 514          void load_and_send_id_cod()
 515          {
 516   1      unsigned char buffer_info[11];
 517   1      unsigned char buf[4];
 518   1      unsigned char i,k;
 519   1      k=0;
 520   1      
 521   1          buffer_info[0]=STX;                       //STX
 522   1          buffer_info[1]='D';                       // nombre del comando de id_cliente, cod_park
 523   1          sprintf(buf,"%d",ID_CLIENTE);             /*ID_CLIENTE lo paso a strim */
 524   1          for(i=2;;i++)
 525   1          {
 526   2            if(buf[k] !=0)                          /*alamaceno id del clinete en el buffer*/
 527   2            {
 528   3            buffer_info[i]=buf[k] ;                 /*almaceno el dato en el buffer*/
 529   3            k++;
 530   3            }
 531   2              else {buffer_info[i]=';'; i++; break;}  /*le pongo un  separador */
 532   2              
 533   2           }
 534   1        
C51 COMPILER V9.59.0.0   PTO_PARALELO                                                      07/27/2021 14:31:10 PAGE 10  

 535   1        
 536   1           sprintf(buf,"%d",COD_PARK);                /*cod_park lo paso a strim*/
 537   1          
 538   1          for(k=0;;i++)
 539   1          {
 540   2            if(buf[k] !=0)
 541   2            {
 542   3            buffer_info[i]=buf[k] ;                   /*lo almaceno en el  buffer*/
 543   3            k++;
 544   3            }else {buffer_info[i]=';'; i++; break;}
 545   2           }
 546   1        
 547   1        
 548   1            buffer_info[i]=ETX;                     //ETX
 549   1            send_port(buffer_info,i);                 /*se transmite informacion pt0 paralelo*/
 550   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1788    ----
   CONSTANT SIZE    =     29    ----
   XDATA SIZE       =     30      98
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
