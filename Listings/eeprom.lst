C51 COMPILER V9.59.0.0   EEPROM                                                            07/27/2021 14:31:10 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\Objects\eeprom.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE eeprom.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listi
                    -ngs\eeprom.lst) TABS(2) OBJECT(.\Objects\eeprom.obj)

line level    source

   1          
   2          #include <eeprom.h>
   3          #include <reg51.h>
   4          
   5          /*funciones externas*/
   6          extern void          _nop_     (void);
   7          extern void Delay (void);
   8          extern void Delay_20us(unsigned int cnt);
   9          extern void Delay_1ms(unsigned int cnt);
  10          void Formato_eeprom();
  11          
  12          //******************************************************************************************
  13          //    RUTINAS DE EEPROM 24FC1025
  14          //******************************************************************************************
  15          sbit sda = P1^2;
  16          sbit scl = P1^3;
  17          //******************************************************************************************
  18          
  19          bit memory_flag;
  20          unsigned char byte_rd;
  21          unsigned char l_data_eeprom;
  22          unsigned char l_chr;
  23          /*define posiciones de memoria*/
  24          #define EE_ID_CLIENTE         0x0000
  25          #define EE_ID_PARK            0x0002
  26          #define EE_TIEMPO_GRACIA      0x0004
  27          #define EE_SIN_COBRO          0x0006
  28          #define EE_DEBUG              0x0008
  29          #define EE_USE_LPR            0x000A
  30          #define EE_CPRCN_ACTIVA       0x000C
  31          #define EE_TIPO_PANTALLA      0X000E
  32          #define EE_FECHA_VENCIMIENTO    0X0350
  33          
  34          
  35          extern int ID_CLIENTE;            
  36          extern int COD_PARK;
  37          extern unsigned char Tipo_Vehiculo;                                   /*tipo de vehiculo*/
  38          extern unsigned int  T_GRACIA;                                        /*tiempo de gracia del parqueo*/
  39          extern unsigned int  SIN_COBRO;                                       /*SIN_COBRO=0 inhabilitado =(1) sin cobro = (2) sin cob
             -ro y salida el mismo dia*/
  40          extern unsigned char  Debug_Tibbo;
  41           //unsigned char  USE_LPR;
  42          extern unsigned char  COMPARACION_ACTIVA;
  43          extern unsigned char  Tarjeta_on;                                   /*detecto vehiculo en loop y tiene tarjeta en boca*/
  44          extern unsigned char  Raspberry;            
  45          //*******************************************************************************************
  46          void ackd(void)
  47          {
  48   1        unsigned int i;
  49   1        memory_flag=1;
  50   1        scl=1;
  51   1        sda=1;
  52   1        for (i=0; i<1100; i++)             //500
  53   1        {
C51 COMPILER V9.59.0.0   EEPROM                                                            07/27/2021 14:31:10 PAGE 2   

  54   2          if (sda==0)
  55   2          {
  56   3            memory_flag=0;
  57   3          scl=0;
  58   3      
  59   3          break;
  60   3          }
  61   2        }
  62   1        
  63   1        if (memory_flag==1)
  64   1        { 
  65   2      
  66   2        }  
  67   1      } 
  68          //*******************************************************************************************
  69          //*******************************************************************************************
  70          void ack_lect(void)
  71          {
  72   1        int i;
  73   1        scl=1;
  74   1        sda=1;
  75   1        memory_flag=1;
  76   1        for (i=0; i<650; i++)
  77   1        {
  78   2          if (sda==0)
  79   2          {
  80   3            memory_flag=0;
  81   3          scl=0;
  82   3          break;
  83   3          }
  84   2        }
  85   1      } 
  86          //*******************************************************************************************
  87          void p_me (void)
  88          {
  89   1          scl=1;
  90   1          _nop_();
  91   1          scl=0;
  92   1      }
  93          //*******************************************************************************************
  94          void e_d_m (unsigned char a_serial_eeprom)
  95          {
  96   1        unsigned char nbits;
  97   1          for (nbits=0; nbits<8; nbits++)
  98   1        {
  99   2          a_serial_eeprom <<=1;
 100   2          if (CY==1)
 101   2          { 
 102   3            sda=1;
 103   3          }
 104   2          else
 105   2          {
 106   3            sda=0;
 107   3          }
 108   2          scl=1;
 109   2          p_me();         
 110   2        }
 111   1        return;
 112   1      }
 113          //********************************************************************************************
 114          void start (void)
 115          {
C51 COMPILER V9.59.0.0   EEPROM                                                            07/27/2021 14:31:10 PAGE 3   

 116   1        sda=1;
 117   1        scl=1;
 118   1        _nop_();
 119   1        sda=0;
 120   1        scl=0;
 121   1        return;
 122   1      }
 123          //*******************************************************************************************
 124          void stop (void)
 125          {
 126   1        scl=0;
 127   1        sda=0;
 128   1        scl=1;
 129   1        sda=1;
 130   1        return;
 131   1      }
 132          //*******************************************************************************************
 133          unsigned char l_d_m (void)
 134          {
 135   1        unsigned char nbits;
 136   1          for (nbits=0; nbits<8; nbits++)
 137   1        {
 138   2          scl=0;
 139   2            if (sda==1) 
 140   2            {
 141   3            l_data_eeprom = l_data_eeprom| 0x01;
 142   3            if (nbits<=6) 
 143   3            {
 144   4              l_data_eeprom<<=1;
 145   4              scl=1;
 146   4            }
 147   3            }
 148   2            if (sda==0)
 149   2            {
 150   3              l_data_eeprom = l_data_eeprom & 0xFE;
 151   3            if (nbits<=6) 
 152   3            {
 153   4                l_data_eeprom <<=1;
 154   4              scl=1;
 155   4            }
 156   3            }
 157   2          }
 158   1        scl=0;
 159   1        return l_data_eeprom;
 160   1      }
 161          //*******************************************************************************************
 162          //*******************************************************************************************
 163          //  ESCRIBE EN EEPROM                                   *
 164          //*******************************************************************************************
 165          //void wr_eeprom (unsigned char control,unsigned char dir_h,unsigned char dir_l,unsigned char data_eeprom)
 166          void wr_eeprom (unsigned char control,unsigned int Dir, unsigned char data_eeprom)
 167          {
 168   1        unsigned char dir_h, dir_l;
 169   1        dir_l=Dir;
 170   1        Dir>>=8;
 171   1        dir_h=Dir;
 172   1      
 173   1      
 174   1        scl=0;
 175   1        sda=0;
 176   1      //  wait();
 177   1          start();
C51 COMPILER V9.59.0.0   EEPROM                                                            07/27/2021 14:31:10 PAGE 4   

 178   1        e_d_m(control);
 179   1        ackd();
 180   1        e_d_m(dir_h);
 181   1        ackd();
 182   1        e_d_m(dir_l);
 183   1        ackd();
 184   1        e_d_m(data_eeprom);
 185   1        ackd();
 186   1        stop();
 187   1        Delay_1ms(13);
 188   1        
 189   1        scl=1;
 190   1        sda=1;
 191   1        Delay_20us(98);                   /*wait long*/
 192   1        Delay_20us(98);
 193   1      }
 194          //*******************************************************************************************
 195          //  ESCRIBE EN EEPROM                                   *
 196          //*******************************************************************************************
 197          /*
 198          void wrpage_eeprom (unsigned char control,unsigned char dir_h,unsigned char dir_l,unsigned char data_eepro
             -m)  
 199          {
 200            unsigned int j;
 201            scl=0;
 202            sda=0;
 203            wait();
 204          
 205            wait();
 206          
 207              start();
 208            e_d_m(control);
 209            ack();
 210            e_d_m(dir_h);
 211            ack();
 212            e_d_m(dir_l);
 213            ack();
 214            for (j=0; j<=127; j++)
 215            {
 216              e_d_m(data_eeprom);
 217              ack();
 218            }
 219            stop();
 220            Delay_1ms(13);
 221            scl=1;
 222            sda=1;
 223           return;
 224          }                                              */
 225          //******************************************************************************************* 
 226          //******************************************************************************************* 
 227          //  LEE EN EEPROM                                     *
 228          //*******************************************************************************************
 229          //unsigned char rd_eeprom (unsigned char control,unsigned char dir_h,unsigned char dir_l) 
 230          unsigned char rd_eeprom (unsigned char control,unsigned int Dir) 
 231          {
 232   1      
 233   1        unsigned char dir_h, dir_l;
 234   1        dir_l=Dir;
 235   1        Dir>>=8;
 236   1        dir_h=Dir;
 237   1      
 238   1        scl=0;
C51 COMPILER V9.59.0.0   EEPROM                                                            07/27/2021 14:31:10 PAGE 5   

 239   1        sda=0;
 240   1       // wait();
 241   1        start();
 242   1        e_d_m(control);
 243   1        ack_lect();
 244   1        e_d_m(dir_h);
 245   1          ack_lect();
 246   1        e_d_m(dir_l);
 247   1        ack_lect();
 248   1        start();
 249   1        e_d_m(control+0x01);
 250   1        ackd();
 251   1        scl=0;
 252   1        l_d_m();
 253   1        stop();
 254   1          scl=1;
 255   1        sda=1;
 256   1        return l_data_eeprom;
 257   1      }
 258          /*------------------------------------------------------------------------------
 259          Rutina que lee la eeprom, los bit de configuracion 
 260          ------------------------------------------------------------------------------*/
 261          void variable_inicio()
 262          {
 263   1        
 264   1        ID_CLIENTE=rd_eeprom(0xa8,EE_ID_CLIENTE); 
 265   1        COD_PARK=rd_eeprom(0xa8,EE_ID_PARK);
 266   1        T_GRACIA=rd_eeprom(0xa8,EE_TIEMPO_GRACIA);
 267   1        SIN_COBRO=rd_eeprom(0xa8,EE_SIN_COBRO);
 268   1        Debug_Tibbo=rd_eeprom(0xa8,EE_DEBUG);
 269   1      //  USE_LPR=rd_eeprom(0xa8,EE_USE_LPR);
 270   1        COMPARACION_ACTIVA=rd_eeprom(0xa8,EE_CPRCN_ACTIVA);
 271   1        Raspberry = rd_eeprom(0xa8,EE_TIPO_PANTALLA);
 272   1      }
 273          void Formato_eeprom()
 274          {
 275   1      unsigned char dato=0xff;
 276   1      unsigned int i;
 277   1        for(i=0; i< EE_FECHA_VENCIMIENTO; i++)
 278   1        {
 279   2            wr_eeprom(0xa8,i,dato);
 280   2        }
 281   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    472    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      3       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
