C51 COMPILER V9.59.0.0   EEPROM                                                            08/05/2020 11:21:05 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\Objects\eeprom.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE eeprom.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listi
                    -ngs\eeprom.lst) TABS(2) OBJECT(.\Objects\eeprom.obj)

line level    source

   1          
   2          #include <eeprom.h>
   3          #include <reg51.h>
   4          
   5          /*funciones externas*/
   6          extern void          _nop_     (void);
   7          extern void Delay (void);
   8          extern void Delay_20us(unsigned int cnt);
   9          extern void Delay_1ms(unsigned int cnt);
  10          
  11          //******************************************************************************************
  12          //    RUTINAS DE EEPROM 24FC1025
  13          //******************************************************************************************
  14          sbit sda = P1^2;
  15          sbit scl = P1^3;
  16          //******************************************************************************************
  17          
  18          bit memory_flag;
  19          unsigned char byte_rd;
  20          unsigned char l_data_eeprom;
  21          unsigned char l_chr;
  22          /*define posiciones de memoria*/
  23          #define EE_ID_CLIENTE         0x0000
  24          #define EE_ID_PARK            0x0002
  25          #define EE_TIEMPO_GRACIA      0x0004
  26          #define EE_SIN_COBRO          0x0006
  27          #define EE_DEBUG              0x0008
  28          #define EE_USE_LPR            0x000A
  29          #define EE_CPRCN_ACTIVA       0x000C
  30          #define EE_TIPO_PANTALLA      0X000E
  31          
  32          
  33          extern int ID_CLIENTE;            
  34          extern int COD_PARK;
  35          extern unsigned char Tipo_Vehiculo;                                   /*tipo de vehiculo*/
  36          extern unsigned int  T_GRACIA;                                        /*tiempo de gracia del parqueo*/
  37          extern unsigned int  SIN_COBRO;                                       /*SIN_COBRO=0 inhabilitado =(1) sin cobro = (2) sin cob
             -ro y salida el mismo dia*/
  38          extern unsigned char  Debug_Tibbo;
  39           //unsigned char  USE_LPR;
  40          extern unsigned char  COMPARACION_ACTIVA;
  41          extern unsigned char  Tarjeta_on;                                   /*detecto vehiculo en loop y tiene tarjeta en boca*/
  42          extern unsigned char  Raspberry;            
  43          //*******************************************************************************************
  44          void ackd(void)
  45          {
  46   1        unsigned int i;
  47   1        memory_flag=1;
  48   1        scl=1;
  49   1        sda=1;
  50   1        for (i=0; i<1100; i++)             //500
  51   1        {
  52   2          if (sda==0)
  53   2          {
C51 COMPILER V9.59.0.0   EEPROM                                                            08/05/2020 11:21:05 PAGE 2   

  54   3            memory_flag=0;
  55   3          scl=0;
  56   3      
  57   3          break;
  58   3          }
  59   2        }
  60   1        
  61   1        if (memory_flag==1)
  62   1        { 
  63   2      
  64   2        }  
  65   1      } 
  66          //*******************************************************************************************
  67          //*******************************************************************************************
  68          void ack_lect(void)
  69          {
  70   1        int i;
  71   1        scl=1;
  72   1        sda=1;
  73   1        memory_flag=1;
  74   1        for (i=0; i<650; i++)
  75   1        {
  76   2          if (sda==0)
  77   2          {
  78   3            memory_flag=0;
  79   3          scl=0;
  80   3          break;
  81   3          }
  82   2        }
  83   1      } 
  84          //*******************************************************************************************
  85          void p_me (void)
  86          {
  87   1          scl=1;
  88   1          _nop_();
  89   1          scl=0;
  90   1      }
  91          //*******************************************************************************************
  92          void e_d_m (unsigned char a_serial_eeprom)
  93          {
  94   1        unsigned char nbits;
  95   1          for (nbits=0; nbits<8; nbits++)
  96   1        {
  97   2          a_serial_eeprom <<=1;
  98   2          if (CY==1)
  99   2          { 
 100   3            sda=1;
 101   3          }
 102   2          else
 103   2          {
 104   3            sda=0;
 105   3          }
 106   2          scl=1;
 107   2          p_me();         
 108   2        }
 109   1        return;
 110   1      }
 111          //********************************************************************************************
 112          void start (void)
 113          {
 114   1        sda=1;
 115   1        scl=1;
C51 COMPILER V9.59.0.0   EEPROM                                                            08/05/2020 11:21:05 PAGE 3   

 116   1        _nop_();
 117   1        sda=0;
 118   1        scl=0;
 119   1        return;
 120   1      }
 121          //*******************************************************************************************
 122          void stop (void)
 123          {
 124   1        scl=0;
 125   1        sda=0;
 126   1        scl=1;
 127   1        sda=1;
 128   1        return;
 129   1      }
 130          //*******************************************************************************************
 131          unsigned char l_d_m (void)
 132          {
 133   1        unsigned char nbits;
 134   1          for (nbits=0; nbits<8; nbits++)
 135   1        {
 136   2          scl=0;
 137   2            if (sda==1) 
 138   2            {
 139   3            l_data_eeprom = l_data_eeprom| 0x01;
 140   3            if (nbits<=6) 
 141   3            {
 142   4              l_data_eeprom<<=1;
 143   4              scl=1;
 144   4            }
 145   3            }
 146   2            if (sda==0)
 147   2            {
 148   3              l_data_eeprom = l_data_eeprom & 0xFE;
 149   3            if (nbits<=6) 
 150   3            {
 151   4                l_data_eeprom <<=1;
 152   4              scl=1;
 153   4            }
 154   3            }
 155   2          }
 156   1        scl=0;
 157   1        return l_data_eeprom;
 158   1      }
 159          //*******************************************************************************************
 160          //*******************************************************************************************
 161          //  ESCRIBE EN EEPROM                                   *
 162          //*******************************************************************************************
 163          //void wr_eeprom (unsigned char control,unsigned char dir_h,unsigned char dir_l,unsigned char data_eeprom)
 164          void wr_eeprom (unsigned char control,unsigned int Dir, unsigned char data_eeprom)
 165          {
 166   1        unsigned char dir_h, dir_l;
 167   1        dir_l=Dir;
 168   1        Dir>>=8;
 169   1        dir_h=Dir;
 170   1      
 171   1      
 172   1        scl=0;
 173   1        sda=0;
 174   1      //  wait();
 175   1          start();
 176   1        e_d_m(control);
 177   1        ackd();
C51 COMPILER V9.59.0.0   EEPROM                                                            08/05/2020 11:21:05 PAGE 4   

 178   1        e_d_m(dir_h);
 179   1        ackd();
 180   1        e_d_m(dir_l);
 181   1        ackd();
 182   1        e_d_m(data_eeprom);
 183   1        ackd();
 184   1        stop();
 185   1        Delay_1ms(13);
 186   1        
 187   1        scl=1;
 188   1        sda=1;
 189   1        Delay_20us(98);                   /*wait long*/
 190   1        Delay_20us(98);
 191   1      }
 192          //*******************************************************************************************
 193          //  ESCRIBE EN EEPROM                                   *
 194          //*******************************************************************************************
 195          /*
 196          void wrpage_eeprom (unsigned char control,unsigned char dir_h,unsigned char dir_l,unsigned char data_eepro
             -m)  
 197          {
 198            unsigned int j;
 199            scl=0;
 200            sda=0;
 201            wait();
 202          
 203            wait();
 204          
 205              start();
 206            e_d_m(control);
 207            ack();
 208            e_d_m(dir_h);
 209            ack();
 210            e_d_m(dir_l);
 211            ack();
 212            for (j=0; j<=127; j++)
 213            {
 214              e_d_m(data_eeprom);
 215              ack();
 216            }
 217            stop();
 218            Delay_1ms(13);
 219            scl=1;
 220            sda=1;
 221           return;
 222          }                                              */
 223          //******************************************************************************************* 
 224          //******************************************************************************************* 
 225          //  LEE EN EEPROM                                     *
 226          //*******************************************************************************************
 227          //unsigned char rd_eeprom (unsigned char control,unsigned char dir_h,unsigned char dir_l) 
 228          unsigned char rd_eeprom (unsigned char control,unsigned int Dir) 
 229          {
 230   1      
 231   1        unsigned char dir_h, dir_l;
 232   1        dir_l=Dir;
 233   1        Dir>>=8;
 234   1        dir_h=Dir;
 235   1      
 236   1        scl=0;
 237   1        sda=0;
 238   1       // wait();
C51 COMPILER V9.59.0.0   EEPROM                                                            08/05/2020 11:21:05 PAGE 5   

 239   1        start();
 240   1        e_d_m(control);
 241   1        ack_lect();
 242   1        e_d_m(dir_h);
 243   1          ack_lect();
 244   1        e_d_m(dir_l);
 245   1        ack_lect();
 246   1        start();
 247   1        e_d_m(control+0x01);
 248   1        ackd();
 249   1        scl=0;
 250   1        l_d_m();
 251   1        stop();
 252   1          scl=1;
 253   1        sda=1;
 254   1        return l_data_eeprom;
 255   1      }
 256          /*------------------------------------------------------------------------------
 257          Rutina que lee la eeprom, los bit de configuracion 
 258          ------------------------------------------------------------------------------*/
 259          void variable_inicio()
 260          {
 261   1        
 262   1        ID_CLIENTE=rd_eeprom(0xa8,EE_ID_CLIENTE); 
 263   1        COD_PARK=rd_eeprom(0xa8,EE_ID_PARK);
 264   1        T_GRACIA=rd_eeprom(0xa8,EE_TIEMPO_GRACIA);
 265   1        SIN_COBRO=rd_eeprom(0xa8,EE_SIN_COBRO);
 266   1        Debug_Tibbo=rd_eeprom(0xa8,EE_DEBUG);
 267   1      //  USE_LPR=rd_eeprom(0xa8,EE_USE_LPR);
 268   1        COMPARACION_ACTIVA=rd_eeprom(0xa8,EE_CPRCN_ACTIVA);
 269   1        Raspberry = rd_eeprom(0xa8,EE_TIPO_PANTALLA);
 270   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    418    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      3    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
