C51 COMPILER V9.59.0.0   PANTALLAS                                                         08/31/2020 09:26:19 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE PANTALLAS
OBJECT MODULE PLACED IN .\Objects\pantallas.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE pantallas.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Li
                    -stings\pantallas.lst) TABS(2) OBJECT(.\Objects\pantallas.obj)

line level    source

   1          #include<pantallas.h>
   2          #include <reg51.h>
   3          #include <string.h>
   4          
   5          sbit sel_com = P0^7;        //Micro switch    
   6          
   7          
   8          /*funciones externas*/
   9          extern char putchar (char c);
  10          extern void Block_read_Clock(unsigned char *datos_clock);
  11          extern void DebugBufferMF(unsigned char *str,unsigned char num_char,char io);
  12          extern void Debug_Dividir_texto();
  13          extern void clean_tx();
  14          extern void Debug_txt_Tibbo(unsigned char * str);
  15          extern void          _nop_     (void);
  16          extern void Debug_chr_Tibbo(unsigned char Dat);
  17          
  18          /*mensajes de salida desde 85 a 169*/
  19          
  20          #define INGRESE                 85          //0xDF //E3,E4,E5
  21          #define SIN_INGRESO             86          //0XE6
  22          #define SIN_PAGO                87            //0XE7
  23          #define EXCEDE_GRACIA           88          //0XE8
  24          #define MENSUAL_NO_PARK         89
  25          #define DIRIJASE_CAJA           90
  26          #define GRACIAS                 91            //0XFF,01
  27          /*mensajes mensual llega de lectura de wiegand de principal*/
  28          #define LECTURA_WIEGAND         92          //0xB0
  29          #define NO_IN_PARK              93            //B2
  30          #define EXPIRO                  94            //B4
  31          #define EXCEDE_HORARIO          95
  32          #define NO_MENSUAL_NI_PREPAGO   96
  33          #define MENSUAL_NO_PAGO         97
  34          /*mensajes informativos*/
  35          
  36          
  37          #define ERROR_COD_PARK          170         //0XE5
  38          #define ERROR_LOOP              171         //0XE0
  39          #define TARJETA_INVALIDA        172           //0XE1
  40          #define TARJETA_SIN_FORMATO     173         //0xDF
  41          #define OFF_LINE                174         //B6
  42          #define UN_MOMENTO              175
  43          
  44          
  45          #define NOTIFIQUE_EVP           'N'
  46          #define NO_NOTIFIQUE_EVP        'S'
  47          #define COMPARANDO_PLACA        'P'           /*msj de eeror de placa*/
  48          #define ENVIANDO_COD            'D'
  49          #define INFO1                   'I'
  50          #define INFO2                   'i'
  51          
  52          /*variables externas */
  53          extern unsigned char  Raspberry;
  54          /*------------------------------------------------------------------------------
C51 COMPILER V9.59.0.0   PANTALLAS                                                         08/31/2020 09:26:19 PAGE 2   

  55          transmite el caracter pto serie
  56          data_com = al caracter a escribir
  57          enable_char_add = si esta en (1) envia un null (0) adicional, si es (0) no envia caracter adicional
  58          ------------------------------------------------------------------------------*/
  59          void tx_chrlcd (unsigned char data_com, unsigned char enable_char_add)
  60          {
  61   1        unsigned char d;
  62   1        d=putchar(data_com);
  63   1        if (enable_char_add != 0) d=putchar(0x00);
  64   1        
  65   1      }
  66          
  67          /*------------------------------------------------------------------------------
  68          envia un msj asta null(0)
  69          msg= apuntador del msj
  70          enable_char_add = si esta en (1) envia un null (0) adicional, si es (0) no envia caracter adicional
  71          ------------------------------------------------------------------------------*/
  72          void LCD_txt (unsigned char * msg,unsigned char enable_char_add )
  73          {
  74   1        unsigned char i;
  75   1         
  76   1        for (i=0; msg[i] != '\0'; i++)
  77   1        {
  78   2          tx_chrlcd(msg[i],enable_char_add);
  79   2        }
  80   1      }
  81          /*------------------------------------------------------------------------------
  82          Escribo el reloj en ascii en bloque 
  83          msg= apuntador del msj
  84          length_char longitud de la tram
  85          enable_char_add = si esta en (1) envia un null (0) adicional, si es (0) no envia caracter adicional
  86          ------------------------------------------------------------------------------*/
  87          void LCD_txt_num_char(unsigned char * msg,unsigned char length_char, unsigned char enable_char_add)
  88          {
  89   1        unsigned char i;
  90   1         
  91   1        for (i=0; i<length_char; i++)
  92   1        {
  93   2          tx_chrlcd(msg[i],enable_char_add);
  94   2        }
  95   1      }
  96          /*------------------------------------------------------------------------------
  97          Transmite una trama por el pto serie con el protocolo para  raspberry
  98          msg= es el apuntador del msj
  99          ------------------------------------------------------------------------------*/
 100          void Raspberry_data (unsigned char * msg)
 101          {
 102   1        static unsigned char i;
 103   1        unsigned char lenth_cadena;
 104   1        unsigned char d;
 105   1        
 106   1        lenth_cadena=strlen(msg);
 107   1        //Debug_chr_Tibbo(lenth_cadena);
 108   1        //Debug_Dividir_texto();  
 109   1        //Debug_txt_Tibbo(msg); 
 110   1        //Debug_Dividir_texto();    
 111   1        for (i=0;  i<lenth_cadena+1 ; i++)
 112   1        {
 113   2          d=putchar(*msg);
 114   2          msg++;
 115   2        
 116   2        
C51 COMPILER V9.59.0.0   PANTALLAS                                                         08/31/2020 09:26:19 PAGE 3   

 117   2         
 118   2        }
 119   1        
 120   1        
 121   1        
 122   1      }
 123          
 124          
 125          /*------------------------------------------------------------------------------
 126          Escribo el reloj en ascii en bloque 
 127          AA 80 28 trama de inicio de configuracion de la pantalla
 128          07 numero de caracteres de la trama de reloj
 129          20 19 03 26 09 21 20  el dato del reloj
 130          ------------------------------------------------------------------------------*/
 131          void Reloj_Pantalla_Lcd()
 132          {
 133   1      
 134   1       unsigned char Ini_Clock_LCD   []={0xaa,0x80,0x28,0x07,0x20,0x00,0,0,0,0,20,0,0} ;
 135   1                if (Raspberry==0)
 136   1                { 
 137   2                sel_com=0;                                                                      /*switch del pto serie a la pantalla*/
 138   2                Block_read_Clock(Ini_Clock_LCD+5);                                              /*Leo el reloj programado*/
 139   2                //Debug_Dividir_texto();                                                          /*lineas de separacion del texto*/
 140   2                //DebugBufferMF(Ini_Clock_LCD,12,0);                                              /*muestra la trama por debug*/
 141   2                //Debug_Dividir_texto();                                                          /*linea de separacion de texto*/
 142   2                REN = 0;                                                                        /*inhabilita recepcion de datos*/
 143   2                LCD_txt_num_char(Ini_Clock_LCD,13,0);                                           /*cmd de inicializacion del reloj del lcd*
             -/
 144   2                                                            
 145   2                REN = 1;                                                                        /*habilita recepcion de datos*/
 146   2                sel_com=1;  
 147   2                  /*switch pto serie a verificador o expedidor */
 148   2                }
 149   1                else
 150   1                {
 151   2                  sel_com=0;
 152   2                  Ini_Clock_LCD [0]=0;
 153   2                  Block_read_Clock(Ini_Clock_LCD);
 154   2                  Raspberry_data((unsigned char  *) "d;hora");
 155   2                  sel_com=1;  
 156   2                }
 157   1      }
 158          /*------------------------------------------------------------------------------
 159          Rutina de msj de pantalla
 160          ------------------------------------------------------------------------------*/
 161          void PantallaLCD(unsigned char cod_msg)
 162          {
 163   1      
 164   1      unsigned char Ini_LCD_Line_one   []={0xaa,0x80,0x18,0x01,0x02,0x00} ;
 165   1      //unsigned char Ini_LCD_Line_two   []={0xaa,0x80,0x18,0x02,0x02,0x00} ;
 166   1      //unsigned char Ini_Off_Line []={0xaa,0x80,0x18,0x01,0x03,0x00} ;
 167   1        
 168   1      unsigned char num_chr;
 169   1      
 170   1        
 171   1          sel_com=0;
 172   1        
 173   1          if (Raspberry==0)
 174   1          {
 175   2            LCD_txt (Ini_LCD_Line_one,0);
 176   2            
 177   2            switch (cod_msg)
C51 COMPILER V9.59.0.0   PANTALLAS                                                         08/31/2020 09:26:19 PAGE 4   

 178   2            {
 179   3            /*mensajes de entrada lcd pto serie*/
 180   3                case INGRESE:
 181   3                    num_chr=strlen((unsigned char  *) "INGRESE TARJETA ");                    /*cmd 31 es en proceso de ejecucion
             - del firtware*/
 182   3                    tx_chrlcd(0x00,0);
 183   3                    tx_chrlcd(num_chr*2,0);
 184   3                    LCD_txt ((unsigned char *)"INGRESE TARJETA ",1);
 185   3                    break;
 186   3              
 187   3              case SIN_INGRESO:
 188   3                     
 189   3                    num_chr=strlen((unsigned char  *) "TARJETA SIN INGRESO ");
 190   3                    tx_chrlcd(0x00,0);
 191   3                    tx_chrlcd(num_chr*2,0);
 192   3                    LCD_txt ((unsigned char *)"TARJETA SIN INGRESO ",1);
 193   3                     break;
 194   3                  
 195   3              case SIN_PAGO:
 196   3                     
 197   3                    num_chr=strlen((unsigned char  *) "TARJETA NO REGISTRA PAGO ");
 198   3                    tx_chrlcd(0x00,0);
 199   3                    tx_chrlcd(num_chr*2,0);
 200   3                    LCD_txt ((unsigned char *)"TARJETA NO REGISTRA PAGO ",1);
 201   3                    break;
 202   3              case EXCEDE_GRACIA:
 203   3                    num_chr=strlen((unsigned char  *) "EXCEDE TIEMPO DE GRACIA ");
 204   3                    tx_chrlcd(0x00,0);
 205   3                    tx_chrlcd(num_chr*2,0);
 206   3                    LCD_txt ((unsigned char *)"EXCEDE TIEMPO DE GRACIA ",1);
 207   3                    break;  
 208   3              case MENSUAL_NO_PARK:
 209   3                    num_chr=strlen((unsigned char  *) "MENSUAL NO ESTA EN PARQUEADERO ");                   /*cmd 31 es en proce
             -so de ejecucion del firtware*/
 210   3                    tx_chrlcd(0x00,0);
 211   3                    tx_chrlcd(num_chr*2,0);
 212   3                    LCD_txt ((unsigned char *)"MENSUAL NO ESTA EN PARQUEADERO ",1);   
 213   3                    break;
 214   3              case DIRIJASE_CAJA:
 215   3                    num_chr=strlen((unsigned char  *) "DIRIJASE A CAJA ");                    /*cmd 31 es en proceso de ejecucion
             - del firtware*/
 216   3                    tx_chrlcd(0x00,0);
 217   3                    tx_chrlcd(num_chr*2,0);
 218   3                    LCD_txt ((unsigned char *)"DIRIJASE A CAJA ",1); 
 219   3                    break;
 220   3              case GRACIAS:
 221   3                       
 222   3                    num_chr=strlen((unsigned char  *) "GRACIAS... ");
 223   3                    tx_chrlcd(0x00,0);
 224   3                    tx_chrlcd(num_chr*2,0);
 225   3                    LCD_txt ((unsigned char *)"GRACIAS...",1); 
 226   3                    break;
 227   3              case NO_IN_PARK:
 228   3                    num_chr=strlen((unsigned char  *) "MENSUAL NO ESTA EN PARQUEADERO ");
 229   3                    tx_chrlcd(0x00,0);
 230   3                    tx_chrlcd(num_chr*2,0);
 231   3                    LCD_txt ((unsigned char *)"MENSUAL NO ESTA EN PARQUEADERO ",1); 
 232   3                    break;
 233   3              case EXPIRO:
 234   3                    num_chr=strlen((unsigned char  *) "MENSUALIDAD VENCIDA ");
 235   3                    tx_chrlcd(0x00,0);
 236   3                    tx_chrlcd(num_chr*2,0);
C51 COMPILER V9.59.0.0   PANTALLAS                                                         08/31/2020 09:26:19 PAGE 5   

 237   3                    LCD_txt ((unsigned char *)"MENSUALIDAD VENCIDA ",1); 
 238   3                    break;
 239   3               case EXCEDE_HORARIO:
 240   3                    num_chr=strlen((unsigned char  *) "MENSUALIDAD EXCEDE HORARIO ACERQUESE A CAJA ");
 241   3                    tx_chrlcd(0x00,0);
 242   3                    tx_chrlcd(num_chr*2,0);
 243   3                    LCD_txt ((unsigned char *)"MENSUALIDAD EXCEDE HORARIO ACERQUESE A CAJA ",1);            
 244   3                    break;
 245   3                         
 246   3               case NO_MENSUAL_NI_PREPAGO:
 247   3                    num_chr=strlen((unsigned char  *) "NO ES MENSUALIDAD NI PREPAGO");
 248   3                    tx_chrlcd(0x00,0);
 249   3                    tx_chrlcd(num_chr*2,0);
 250   3                    LCD_txt ((unsigned char *)"NO ES MENSUALIDAD NI PREPAGO",1);            
 251   3                    break;
 252   3                         
 253   3                case MENSUAL_NO_PAGO:
 254   3                    num_chr=strlen((unsigned char  *) "MENSUAL NO PAGO LOCACION HOY");
 255   3                    tx_chrlcd(0x00,0);
 256   3                    tx_chrlcd(num_chr*2,0);
 257   3                    LCD_txt ((unsigned char *)"MENSUAL NO PAGO LOCACION HOY",1);            
 258   3                    break;
 259   3                      
 260   3              
 261   3              /*mensajes informativos por lcd pto serie*/
 262   3              
 263   3                 case ERROR_COD_PARK:
 264   3                       
 265   3                    num_chr=strlen((unsigned char  *) "TARJETA NO ES DEL PARQUEADERO ");
 266   3                    tx_chrlcd(0x00,0);
 267   3                    tx_chrlcd(num_chr*2,0);
 268   3                    LCD_txt ((unsigned char *)"TARJETA NO ES DEL PARQUEADERO ",1); 
 269   3                    break;     
 270   3                 case ERROR_LOOP:
 271   3                     
 272   3                    num_chr=strlen((unsigned char  *) "SIN PRESENCIA VEHICULAR ");
 273   3                    tx_chrlcd(0x00,0);
 274   3                    tx_chrlcd(num_chr*2,0);
 275   3                    LCD_txt ((unsigned char *)"SIN PRESENCIA VEHICULAR ",1); 
 276   3                    break;
 277   3                  case TARJETA_INVALIDA:
 278   3                     
 279   3                    num_chr=strlen((unsigned char  *) "TARJETA INVALIDA ");
 280   3                    tx_chrlcd(0x00,0);
 281   3                    tx_chrlcd(num_chr*2,0);
 282   3                    LCD_txt ((unsigned char *)"TARJETA INVALIDA ",1); 
 283   3                    break;
 284   3                   case TARJETA_SIN_FORMATO:
 285   3                      
 286   3                    num_chr=strlen((unsigned char  *) "TARJETA SIN FORMATO ");
 287   3                    tx_chrlcd(0x00,0);
 288   3                    tx_chrlcd(num_chr*2,0);
 289   3                    LCD_txt ((unsigned char *)"TARJETA SIN FORMATO ",1); 
 290   3                    break;
 291   3                
 292   3                   case   OFF_LINE:
 293   3                
 294   3                    num_chr=strlen((unsigned char *) "FUERA DE LINEA ");
 295   3                    tx_chrlcd(0x00,0);
 296   3                    tx_chrlcd(num_chr*2,0);
 297   3                    LCD_txt((unsigned char *)        "FUERA DE LINEA ",1);
 298   3                    break;
C51 COMPILER V9.59.0.0   PANTALLAS                                                         08/31/2020 09:26:19 PAGE 6   

 299   3                
 300   3                  case UN_MOMENTO:
 301   3                    num_chr=strlen((unsigned char *) "UN MOMENTO POR FAVOR ");
 302   3                    tx_chrlcd(0x00,0);
 303   3                    tx_chrlcd(num_chr*2,0);
 304   3                    LCD_txt((unsigned char *)        "UN MOMENTO POR FAVOR ",1);
 305   3                    break;
 306   3                  default:
 307   3            
 308   3                  break;  
 309   3            }
 310   2              sel_com=1;  
 311   2        
 312   2          }
 313   1            else
 314   1            {
 315   2               sel_com=0;   
 316   2               switch (cod_msg)
 317   2               {
 318   3                    /*msj de entrada*/
 319   3                 
 320   3                  case INGRESE:
 321   3                        Raspberry_data((unsigned char  *) "a;85;INGRESE TARJETA\n\r\0");                    /*cmd 31 es en proceso 
             -de ejecucion del firtware*/
 322   3                        break;
 323   3                  case SIN_INGRESO:
 324   3                     
 325   3                        Raspberry_data((unsigned char  *) "a;86;TARJETA SIN INGRESO \n\r\0");
 326   3                        break;
 327   3                  
 328   3                  case SIN_PAGO:
 329   3                     
 330   3                        Raspberry_data((unsigned char  *) "a;87;TARJETA NO REGISTRA PAGO\n\r\0");
 331   3                        break;
 332   3                  case EXCEDE_GRACIA:
 333   3                        Raspberry_data((unsigned char  *) "a;88;EXCEDE TIEMPO DE GRACIA \n\r\0");
 334   3                        break;  
 335   3                  case MENSUAL_NO_PARK:
 336   3                        Raspberry_data((unsigned char  *) "a;89;MENSUAL NO ESTA EN PARQUEADERO\n\r\0");                   /*cmd 31
             - es en proceso de ejecucion del firtware*/
 337   3                        break;
 338   3                  case DIRIJASE_CAJA:
 339   3                        Raspberry_data((unsigned char  *) "a;90;DIRIJASE A CAJA\n\r\0");                    /*cmd 31 es en proceso 
             -de ejecucion del firtware*/
 340   3                        break;
 341   3                  case GRACIAS:
 342   3                       
 343   3                        Raspberry_data((unsigned char  *) "a;91;GRACIAS... \n\r\0");
 344   3                        break;
 345   3                  case NO_IN_PARK:
 346   3                        Raspberry_data((unsigned char  *) "a;93;MENSUAL NO ESTA EN PARQUEADERO\n\r\0");
 347   3                        break;
 348   3                    
 349   3                 case EXPIRO:
 350   3                        Raspberry_data((unsigned char  *) "a;94;MENSUALIDAD VENCIDA\n\r\0");
 351   3                        break;
 352   3                       
 353   3                 case EXCEDE_HORARIO:
 354   3                        Raspberry_data((unsigned char  *) "a;95;MENSUALIDAD EXCEDE HORARIO ACERQUESE A CAJA\n\r\0");
 355   3                        break;
 356   3                         
 357   3                 case NO_MENSUAL_NI_PREPAGO:
C51 COMPILER V9.59.0.0   PANTALLAS                                                         08/31/2020 09:26:19 PAGE 7   

 358   3                        Raspberry_data((unsigned char  *) "a;96;NO ES MENSUALIDAD NI PREPAGO\n\r\0");
 359   3                        break;
 360   3                 
 361   3                  case MENSUAL_NO_PAGO:
 362   3                        Raspberry_data((unsigned char  *) "a;97;MENSUAL NO PAGO LOCACION HOY\n\r\0");
 363   3                        break;
 364   3                
 365   3                  /*msj informativos */
 366   3                  
 367   3                 case ERROR_COD_PARK:
 368   3                       
 369   3                        Raspberry_data((unsigned char  *) "a;98;TARJETA NO ES DEL PARQUEADERO \n\r\0");
 370   3                        break;     
 371   3                 case ERROR_LOOP:
 372   3                     
 373   3                        Raspberry_data((unsigned char  *) "a;98;SIN PRESENCIA VEHICULAR \n\r\0");
 374   3                        break;
 375   3                  case TARJETA_INVALIDA:
 376   3                     
 377   3                        Raspberry_data((unsigned char  *) "a;98;TARJETA INVALIDA \n\r\0");
 378   3                        
 379   3                        break;
 380   3                 case TARJETA_SIN_FORMATO:
 381   3                      
 382   3                        Raspberry_data((unsigned char  *) "a;98;TARJETA SIN FORMATO \n\r\0");
 383   3                        break;
 384   3                 case OFF_LINE:
 385   3                      
 386   3                        Raspberry_data((unsigned char  *) "a;98;FUERA DE LINEA\n\r\0");
 387   3                        break;
 388   3                
 389   3                case UN_MOMENTO:
 390   3                      
 391   3                        Raspberry_data((unsigned char  *) "a;98;UN MOMENTO POR FAVOR\n\r\0");
 392   3                        break;
 393   3                
 394   3                default:
 395   3            
 396   3                break;  
 397   3               }
 398   2               sel_com=1;   
 399   2            }
 400   1            
 401   1           
 402   1      
 403   1      }
 404          void PantallaLCD_LINEA_2(unsigned char cod_msg, unsigned char *buffer)
 405          {
 406   1        
 407   1      unsigned char Ini_LCD_Line_one   []={0xaa,0x80,0x18,0x01,0x02,0x00} ;
 408   1      
 409   1      
 410   1      unsigned char num_chr;
 411   1      unsigned char buf[31];
 412   1      
 413   1        
 414   1      sel_com=0;
 415   1        
 416   1          if (Raspberry==0)
 417   1          {
 418   2          
 419   2            
C51 COMPILER V9.59.0.0   PANTALLAS                                                         08/31/2020 09:26:19 PAGE 8   

 420   2            switch (cod_msg)
 421   2            {
 422   3          
 423   3              case  LECTURA_WIEGAND:
 424   3                LCD_txt (Ini_LCD_Line_one,0);
 425   3                num_chr=strlen((unsigned char *) "WIEGAND ");
 426   3                num_chr=num_chr+strlen(buffer)+1;
 427   3                tx_chrlcd(0x00,0);
 428   3                tx_chrlcd(num_chr*2,0);
 429   3                LCD_txt((unsigned char *)        "WIEGAND ",1);                       /*funcion q trasmite el msj al LCD  y el 
             -(1) coloca los caracteres NULL*/
 430   3                LCD_txt(buffer,1);                                                    /*funcion q trasmite el msj al LCD  y el (1) coloca los 
             -caracteres NULL*/
 431   3                break;
 432   3              case GRACIAS:
 433   3                LCD_txt (Ini_LCD_Line_one,0);
 434   3                num_chr=strlen((unsigned char *) "GRACIAS ");
 435   3                num_chr=num_chr+strlen(buffer)+1;
 436   3                tx_chrlcd(0x00,0);
 437   3                tx_chrlcd(num_chr*2,0);
 438   3                LCD_txt((unsigned char *)        "GRACIAS ",1);                       /*funcion q trasmite el msj al LCD  y el 
             -(1) coloca los caracteres NULL*/
 439   3                LCD_txt(buffer,1);    
 440   3                break;  
 441   3            default:
 442   3            
 443   3              break;  
 444   3            
 445   3            }
 446   2              sel_com=1;  
 447   2          }
 448   1          else
 449   1          {
 450   2             sel_com=0;   
 451   2             switch (cod_msg)
 452   2             {
 453   3               case LECTURA_WIEGAND:
 454   3                
 455   3                  strcpy(buf,"a;92;WIEGAND:");
 456   3                  strcat(buf,buffer);
 457   3                  strcat(buf,"\n\d");
 458   3                  Raspberry_data((unsigned char  *) buf); 
 459   3                
 460   3                  break;
 461   3               
 462   3                case GRACIAS:
 463   3                  strcpy(buf,"a;91;GRACIAS ");
 464   3                  num_chr=strlen(buffer);
 465   3                  *(buffer+(num_chr-1))=0;
 466   3                  strcat(buf,buffer);
 467   3                  strcat(buf,"\n\d");
 468   3                  Raspberry_data((unsigned char  *) buf); 
 469   3                  break;
 470   3              default:
 471   3            
 472   3                break;  
 473   3             }
 474   2             sel_com=1; 
 475   2          }
 476   1          
 477   1        
 478   1      }
C51 COMPILER V9.59.0.0   PANTALLAS                                                         08/31/2020 09:26:19 PAGE 9   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1581    ----
   CONSTANT SIZE    =   1073    ----
   XDATA SIZE       =      1      81
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
