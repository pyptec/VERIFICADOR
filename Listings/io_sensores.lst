C51 COMPILER V9.59.0.0   IO_SENSORES                                                       11/19/2021 12:02:56 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE IO_SENSORES
OBJECT MODULE PLACED IN .\Objects\io_sensores.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE io_sensores.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -Listings\io_sensores.lst) TABS(2) OBJECT(.\Objects\io_sensores.obj)

line level    source

   1          
   2          #include <io_sensores.h>
   3          #include <reg51.h>
   4          
   5          /*funciones externas*/
   6          extern void Debug_txt_Tibbo(unsigned char * str);
   7          extern void load_and_send_info_reloj();
   8          extern void load_and_send_id_cod();
   9          extern void send_portERR(unsigned char cod_err);
  10          extern unsigned char rd_eeprom (unsigned char control,unsigned int Dir); 
  11          
  12          sbit DataIn = P1^1;         //      
  13          sbit sel_A = P3^5;          //Pulsador                        *
  14          sbit sel_B = P3^6;          //Entrada Sensor 2                    *
  15          sbit sel_C = P3^7;          //Entrada Sensor 1                    *
  16          sbit busy = P3^3;           /*bussy de Entrada Interrupcion del Procesador principal      */
  17          
  18          #define NO_TIFIQUE_EVP      'N'
  19          #define SI_NOTIFIQUE_EVP    'S'
  20          
  21          #define AUTOMOVIL           0X00
  22          #define MOTO                0X01
  23          /*datos en eeprom*/
  24          #define EE_CPRCN_ACTIVA       0x000C
  25          #define EE_ADDRESS_HIGH_BOARD   0X0012
  26          
  27          extern bit COMPARACION_ACTIVA;
  28          extern  unsigned char Tipo_Vehiculo;
  29          
  30          //***************************************************************************************************
  31          void sel_Funcion(void)
  32          {
  33   1        sel_A=0;
  34   1        sel_B=0;
  35   1        sel_C=0;
  36   1      }
  37          //***************************************************************************************************
  38          void sel_Auto(void)
  39          {
  40   1        sel_A=0;
  41   1        sel_B=1;
  42   1        sel_C=0;
  43   1      }
  44          //***************************************************************************************************
  45          /*
  46          void sel_Pulsa(void)
  47          {
  48            sel_A=1;
  49            sel_B=1;
  50            sel_C=0;
  51          }
  52          */
  53          //***************************************************************************************************
  54          void sel_Sensor2(void)
C51 COMPILER V9.59.0.0   IO_SENSORES                                                       11/19/2021 12:02:56 PAGE 2   

  55          {
  56   1        sel_A=0;
  57   1        sel_B=0;
  58   1        sel_C=1;
  59   1      }
  60          //***************************************************************************************************
  61          void sel_Sensor1(void)
  62          {
  63   1        sel_A=1;
  64   1        sel_B=0;
  65   1        sel_C=1;
  66   1      }
  67          //***************************************************************************************************
  68          void sel_Dir1(void)
  69          {
  70   1        sel_A=0;
  71   1        sel_B=1;
  72   1        sel_C=1;
  73   1      }
  74          //***************************************************************************************************
  75          void sel_Dir2(void)
  76          {
  77   1        sel_A=1;
  78   1        sel_B=1;
  79   1        sel_C=1;
  80   1      }
  81          
  82          char ValidaSensor(void)
  83          {
  84   1        
  85   1      char  Valido=0;
  86   1      int Tmin=500;
  87   1        while ((DataIn==1)&&(Valido==0))
  88   1        {
  89   2          Tmin--;
  90   2          if (Tmin==0)
  91   2          {
  92   3             Valido=1;
  93   3          }
  94   2        }
  95   1        return Valido;
  96   1      }
  97          /*------------------------------------------------------------------------------
  98          Funcion q debuelve la direccion de la tarjeta
  99          ------------------------------------------------------------------------------*/
 100          unsigned char Dir_board()
 101          {
 102   1        unsigned char Board=0x01;
 103   1        unsigned char Board_High;
 104   1        sel_Dir1();
 105   1        if (DataIn==1)
 106   1        {
 107   2          Board++;
 108   2        }
 109   1        sel_Dir2();
 110   1        if (DataIn==1)
 111   1        {
 112   2          Board=Board+2;
 113   2        }
 114   1        if(Board == 0x01)
 115   1        { 
 116   2        Board_High=rd_eeprom(0xa8,EE_ADDRESS_HIGH_BOARD);
C51 COMPILER V9.59.0.0   IO_SENSORES                                                       11/19/2021 12:02:56 PAGE 3   

 117   2        
 118   2          if(Board_High != 0)
 119   2          {
 120   3            if(Board_High == 0xff)
 121   3            {
 122   4              Board=0x01;
 123   4            }
 124   3            else  Board= Board_High ;
 125   3          } 
 126   2        
 127   2        }
 128   1        return (Board+0x30);
 129   1      }
 130          unsigned char Dir_Board_Monitor()
 131          {
 132   1          unsigned char Board_High;
 133   1          
 134   1          Board_High=rd_eeprom(0xa8,EE_ADDRESS_HIGH_BOARD);
 135   1          if(Board_High != 0)
 136   1          {
 137   2            if(Board_High == 0xff)
 138   2            {
 139   3              Board_High=0x01;
 140   3            }
 141   2          }
 142   1          return  Board_High + 0x30;
 143   1      }
 144          /*------------------------------------------------------------------------------
 145          Detecto la activacion de los sensores de salida
 146          si retorna 0xff el sensor activo
 147          si retorno 0x00 loop no activo
 148          01 saliendo
 149          ------------------------------------------------------------------------------*/
 150          
 151          unsigned char  ValidaSensoresPaso(void)
 152          {
 153   1       
 154   1          sel_Sensor2();                                //garantiso q la barrera se encuentre en posicion baja  
 155   1            if ((DataIn==1))        
 156   1          {  
 157   2            if (ValidaSensor()==1)
 158   2            {
 159   3            sel_Sensor1();  
 160   3              if (DataIn==0)                            // sensor1  se encuentra activo puede ser carro, si esta inhabilitado debe
             - ser moto          
 161   3              {  sel_Auto();
 162   4                if (DataIn==0)
 163   4                {                                         // sensor Auto activo es un carro 
 164   5                   Debug_txt_Tibbo((unsigned char *) "Sensores Auto y sensor1 activos.");
 165   5                   Tipo_Vehiculo=AUTOMOVIL;
 166   5                    return 0xff;
 167   5                  
 168   5                }
 169   4                else
 170   4                  {
 171   5                    Debug_txt_Tibbo((unsigned char *) "Sensor activo sensor1 .");
 172   5                    Tipo_Vehiculo=MOTO;
 173   5                    return 0xff ;
 174   5                  }
 175   4                  
 176   4                  
 177   4              }
C51 COMPILER V9.59.0.0   IO_SENSORES                                                       11/19/2021 12:02:56 PAGE 4   

 178   3              else
 179   3              {   sel_Auto();
 180   4                if (DataIn==0)
 181   4                {
 182   5                
 183   5                Debug_txt_Tibbo((unsigned char *) "Detectado. Sensor Auto.");
 184   5                  Tipo_Vehiculo=MOTO;
 185   5                  return 0xff;  
 186   5                }
 187   4                else
 188   4                {
 189   5                  Debug_txt_Tibbo((unsigned char *) "Sensores no detectados");
 190   5                  return 0x00;  
 191   5                }
 192   4                  
 193   4      
 194   4              }
 195   3            }
 196   2            else 
 197   2            {
 198   3              Debug_txt_Tibbo((unsigned char *) "Vehiculo Esperando Salir.");
 199   3              return 0x00;
 200   3            }
 201   2          }else 
 202   1          {
 203   2          Debug_txt_Tibbo((unsigned char *) "Vehiculo Saliendo. Un momento");
 204   2          return 0x01;
 205   2          }
 206   1      
 207   1      }
 208          
 209          unsigned char  ValidaSensores_Out(void)
 210          {
 211   1      char  valido=0;
 212   1        
 213   1          sel_Sensor2();                                //garantiso q la barrera se encuentre en posicion baja  
 214   1            if ((DataIn==1))        
 215   1            {  
 216   2              if (ValidaSensor()==1)
 217   2              {
 218   3                valido=0;
 219   3                return valido;
 220   3              }
 221   2              else
 222   2              {
 223   3                valido=1;
 224   3                return valido;
 225   3              }
 226   2            }
 227   1            else
 228   1            {
 229   2              valido=1;
 230   2              return valido;
 231   2            }
 232   1      }
 233          /*------------------------------------------------------------------------------
 234          funcion de msj en lcd de informacion
 235          toggle=0    envia por el pto paralelo STX, cmd (i), año, mes, dia, hora, minutos, seg, dia de la semana, ETX
 236          toggle=1    
 237          toggle=2    envia ID y COD_PARK   por el pto paralelo STX, cmd (D), ID_CLIENTE, COD_CLIENTE, ETX  
 238          ------------------------------------------------------------------------------*/
 239           void msj_lcd_informativo()
C51 COMPILER V9.59.0.0   IO_SENSORES                                                       11/19/2021 12:02:56 PAGE 5   

 240           {
 241   1       unsigned char info=0;
 242   1       static unsigned char toggle=0;
 243   1            sel_Funcion();                                  /*el pulsador funcion es el cmd q visualiza la informacion tres */
 244   1          if (DataIn==0)
 245   1          {
 246   2             if ((toggle==0)&&(info==0))                    /*primer pulso de funcion*/
 247   2            {
 248   3             if (busy==1)                                   /*habilito transmicion pto paralelo*/
 249   3              {
 250   4                info=1;                                     /*incremento info para ser limpiado cuando se suelte el pulsador*/
 251   4                load_and_send_info_reloj();                 /*se envia el reloj al lcd */
 252   4                toggle=1;                                   /*incremento a toggle para el proximo pulso sea otra opcion*/
 253   4              }
 254   3             }    
 255   2              else if((toggle==1)&&(info==0))
 256   2              {
 257   3                if (busy==1)
 258   3                {
 259   4                info=1;
 260   4                load_and_send_id_cod();                   /*muestro el codigo e id del cliente configurado*/
 261   4                toggle=2;
 262   4                }
 263   3              }
 264   2              else if ((toggle==2)&&(info==0))
 265   2              {
 266   3                if (busy==1)
 267   3                {
 268   4                info=1;
 269   4                  if(rd_eeprom(0xa8,EE_CPRCN_ACTIVA)==1)    /*se muestra si hay comparacion activa si o no*/
 270   4                  {
 271   5                    send_portERR(SI_NOTIFIQUE_EVP);
 272   5                  }else {send_portERR(NO_TIFIQUE_EVP);}
 273   4                  
 274   4                toggle=0;
 275   4                }
 276   3              
 277   3              }
 278   2            
 279   2            }
 280   1          
 281   1          sel_Funcion();                  // el antirebote
 282   1          if (DataIn==1)
 283   1          {
 284   2            info=0;
 285   2          }
 286   1      
 287   1       }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    436    ----
   CONSTANT SIZE    =    160    ----
   XDATA SIZE       =      1       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
