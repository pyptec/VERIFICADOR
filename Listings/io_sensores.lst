C51 COMPILER V9.59.0.0   IO_SENSORES                                                       09/02/2020 07:28:02 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE IO_SENSORES
OBJECT MODULE PLACED IN .\Objects\io_sensores.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE io_sensores.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -Listings\io_sensores.lst) TABS(2) OBJECT(.\Objects\io_sensores.obj)

line level    source

   1          
   2          #include <io_sensores.h>
   3          #include <reg51.h>
   4          
   5          /*funciones externas*/
   6          extern void Debug_txt_Tibbo(unsigned char * str);
   7          extern void load_and_send_info_reloj();
   8          extern void load_and_send_id_cod();
   9          extern void send_portERR(unsigned char cod_err);
  10          extern unsigned char rd_eeprom (unsigned char control,unsigned int Dir); 
  11          
  12          sbit DataIn = P1^1;         //      
  13          sbit sel_A = P3^5;          //Pulsador                        *
  14          sbit sel_B = P3^6;          //Entrada Sensor 2                    *
  15          sbit sel_C = P3^7;          //Entrada Sensor 1                    *
  16          sbit busy = P3^3;           /*bussy de Entrada Interrupcion del Procesador principal      */
  17          
  18          #define NO_TIFIQUE_EVP      'N'
  19          #define SI_NOTIFIQUE_EVP    'S'
  20          
  21          #define AUTOMOVIL           0X00
  22          #define MOTO                0X01
  23          
  24          #define EE_CPRCN_ACTIVA       0x000C
  25          extern bit COMPARACION_ACTIVA;
  26          extern  unsigned char Tipo_Vehiculo;
  27          
  28          //***************************************************************************************************
  29          void sel_Funcion(void)
  30          {
  31   1        sel_A=0;
  32   1        sel_B=0;
  33   1        sel_C=0;
  34   1      }
  35          //***************************************************************************************************
  36          void sel_Auto(void)
  37          {
  38   1        sel_A=0;
  39   1        sel_B=1;
  40   1        sel_C=0;
  41   1      }
  42          //***************************************************************************************************
  43          /*
  44          void sel_Pulsa(void)
  45          {
  46            sel_A=1;
  47            sel_B=1;
  48            sel_C=0;
  49          }
  50          */
  51          //***************************************************************************************************
  52          void sel_Sensor2(void)
  53          {
  54   1        sel_A=0;
C51 COMPILER V9.59.0.0   IO_SENSORES                                                       09/02/2020 07:28:02 PAGE 2   

  55   1        sel_B=0;
  56   1        sel_C=1;
  57   1      }
  58          //***************************************************************************************************
  59          void sel_Sensor1(void)
  60          {
  61   1        sel_A=1;
  62   1        sel_B=0;
  63   1        sel_C=1;
  64   1      }
  65          //***************************************************************************************************
  66          void sel_Dir1(void)
  67          {
  68   1        sel_A=0;
  69   1        sel_B=1;
  70   1        sel_C=1;
  71   1      }
  72          //***************************************************************************************************
  73          void sel_Dir2(void)
  74          {
  75   1        sel_A=1;
  76   1        sel_B=1;
  77   1        sel_C=1;
  78   1      }
  79          
  80          char ValidaSensor(void)
  81          {
  82   1        
  83   1      char  Valido=0;
  84   1      int Tmin=500;
  85   1        while ((DataIn==1)&&(Valido==0))
  86   1        {
  87   2          Tmin--;
  88   2          if (Tmin==0)
  89   2          {
  90   3             Valido=1;
  91   3          }
  92   2        }
  93   1        return Valido;
  94   1      }
  95          /*------------------------------------------------------------------------------
  96          Funcion q debuelve la direccion de la tarjeta
  97          ------------------------------------------------------------------------------*/
  98          unsigned char Dir_board()
  99          {
 100   1        char Board=0x31;
 101   1        
 102   1        sel_Dir1();
 103   1        if (DataIn==1)
 104   1        {
 105   2          Board++;
 106   2        }
 107   1        sel_Dir2();
 108   1        if (DataIn==1)
 109   1        {
 110   2          Board=Board+2;
 111   2        }
 112   1        return (Board);
 113   1      }
 114          /*------------------------------------------------------------------------------
 115          Detecto la activacion de los sensores de salida
 116          si retorna 0xff el sensor activo
C51 COMPILER V9.59.0.0   IO_SENSORES                                                       09/02/2020 07:28:02 PAGE 3   

 117          si retorno 0x00 loop no activo
 118          01 saliendo
 119          ------------------------------------------------------------------------------*/
 120          
 121          unsigned char  ValidaSensoresPaso(void)
 122          {
 123   1       
 124   1          sel_Sensor2();                                //garantiso q la barrera se encuentre en posicion baja  
 125   1            if ((DataIn==1))        
 126   1          {  
 127   2            if (ValidaSensor()==1)
 128   2            {
 129   3            sel_Sensor1();  
 130   3              if (DataIn==0)                            // sensor1  se encuentra activo puede ser carro, si esta inhabilitado debe
             - ser moto          
 131   3              {  sel_Auto();
 132   4                if (DataIn==0)
 133   4                {                                         // sensor Auto activo es un carro 
 134   5                   Debug_txt_Tibbo((unsigned char *) "Sensores Auto y sensor1 activos.");
 135   5                   Tipo_Vehiculo=AUTOMOVIL;
 136   5                    return 0xff;
 137   5                  
 138   5                }
 139   4                else
 140   4                  {
 141   5                    Debug_txt_Tibbo((unsigned char *) "Sensor activo sensor1 .");
 142   5                    Tipo_Vehiculo=MOTO;
 143   5                    return 0xff ;
 144   5                  }
 145   4                  
 146   4                  
 147   4              }
 148   3              else
 149   3              {   sel_Auto();
 150   4                if (DataIn==0)
 151   4                {
 152   5                
 153   5                Debug_txt_Tibbo((unsigned char *) "Detectado. Sensor Auto.");
 154   5                  Tipo_Vehiculo=MOTO;
 155   5                  return 0xff;  
 156   5                }
 157   4                else
 158   4                {
 159   5                  Debug_txt_Tibbo((unsigned char *) "Sensores no detectados");
 160   5                  return 0x00;  
 161   5                }
 162   4                  
 163   4      
 164   4              }
 165   3            }
 166   2            else 
 167   2            {
 168   3              Debug_txt_Tibbo((unsigned char *) "Vehiculo Esperando Salir.");
 169   3              return 0x00;
 170   3            }
 171   2          }else 
 172   1          {
 173   2          Debug_txt_Tibbo((unsigned char *) "Vehiculo Saliendo. Un momento");
 174   2          return 0x01;
 175   2          }
 176   1      
 177   1      }
C51 COMPILER V9.59.0.0   IO_SENSORES                                                       09/02/2020 07:28:02 PAGE 4   

 178          
 179          unsigned char  ValidaSensores_Out(void)
 180          {
 181   1      char  valido=0;
 182   1        
 183   1          sel_Sensor2();                                //garantiso q la barrera se encuentre en posicion baja  
 184   1            if ((DataIn==1))        
 185   1            {  
 186   2              if (ValidaSensor()==1)
 187   2              {
 188   3                valido=0;
 189   3                return valido;
 190   3              }
 191   2              else
 192   2              {
 193   3                valido=1;
 194   3                return valido;
 195   3              }
 196   2            }
 197   1            else
 198   1            {
 199   2              valido=1;
 200   2              return valido;
 201   2            }
 202   1      }
 203          /*------------------------------------------------------------------------------
 204          funcion de msj en lcd de informacion
 205          toggle=0    envia por el pto paralelo STX, cmd (i), año, mes, dia, hora, minutos, seg, dia de la semana, ETX
 206          toggle=1    
 207          toggle=2    envia ID y COD_PARK   por el pto paralelo STX, cmd (D), ID_CLIENTE, COD_CLIENTE, ETX  
 208          ------------------------------------------------------------------------------*/
 209           void msj_lcd_informativo()
 210           {
 211   1       unsigned char info=0;
 212   1       static unsigned char toggle=0;
 213   1            sel_Funcion();                                  /*el pulsador funcion es el cmd q visualiza la informacion tres */
 214   1          if (DataIn==0)
 215   1          {
 216   2             if ((toggle==0)&&(info==0))                    /*primer pulso de funcion*/
 217   2            {
 218   3             if (busy==1)                                   /*habilito transmicion pto paralelo*/
 219   3              {
 220   4                info=1;                                     /*incremento info para ser limpiado cuando se suelte el pulsador*/
 221   4                load_and_send_info_reloj();                 /*se envia el reloj al lcd */
 222   4                toggle=1;                                   /*incremento a toggle para el proximo pulso sea otra opcion*/
 223   4              }
 224   3             }    
 225   2              else if((toggle==1)&&(info==0))
 226   2              {
 227   3                if (busy==1)
 228   3                {
 229   4                info=1;
 230   4                load_and_send_id_cod();                   /*muestro el codigo e id del cliente configurado*/
 231   4                toggle=2;
 232   4                }
 233   3              }
 234   2              else if ((toggle==2)&&(info==0))
 235   2              {
 236   3                if (busy==1)
 237   3                {
 238   4                info=1;
 239   4                  if(rd_eeprom(0xa8,EE_CPRCN_ACTIVA)==1)    /*se muestra si hay comparacion activa si o no*/
C51 COMPILER V9.59.0.0   IO_SENSORES                                                       09/02/2020 07:28:02 PAGE 5   

 240   4                  {
 241   5                    send_portERR(SI_NOTIFIQUE_EVP);
 242   5                  }else {send_portERR(NO_TIFIQUE_EVP);}
 243   4                  
 244   4                toggle=0;
 245   4                }
 246   3              
 247   3              }
 248   2            
 249   2            }
 250   1          
 251   1          sel_Funcion();                  // el antirebote
 252   1          if (DataIn==1)
 253   1          {
 254   2            info=0;
 255   2          }
 256   1      
 257   1       }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    365    ----
   CONSTANT SIZE    =    160    ----
   XDATA SIZE       =      1       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
